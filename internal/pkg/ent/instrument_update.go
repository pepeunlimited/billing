// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/billing/internal/pkg/ent/instrument"
	"github.com/pepeunlimited/billing/internal/pkg/ent/payment"
	"github.com/pepeunlimited/billing/internal/pkg/ent/predicate"
)

// InstrumentUpdate is the builder for updating Instrument entities.
type InstrumentUpdate struct {
	config
	_type             *string
	type_i18n_id      *int64
	addtype_i18n_id   *int64
	cleartype_i18n_id bool
	payments          map[int]struct{}
	removedPayments   map[int]struct{}
	predicates        []predicate.Instrument
}

// Where adds a new predicate for the builder.
func (iu *InstrumentUpdate) Where(ps ...predicate.Instrument) *InstrumentUpdate {
	iu.predicates = append(iu.predicates, ps...)
	return iu
}

// SetType sets the type field.
func (iu *InstrumentUpdate) SetType(s string) *InstrumentUpdate {
	iu._type = &s
	return iu
}

// SetTypeI18nID sets the type_i18n_id field.
func (iu *InstrumentUpdate) SetTypeI18nID(i int64) *InstrumentUpdate {
	iu.type_i18n_id = &i
	iu.addtype_i18n_id = nil
	return iu
}

// SetNillableTypeI18nID sets the type_i18n_id field if the given value is not nil.
func (iu *InstrumentUpdate) SetNillableTypeI18nID(i *int64) *InstrumentUpdate {
	if i != nil {
		iu.SetTypeI18nID(*i)
	}
	return iu
}

// AddTypeI18nID adds i to type_i18n_id.
func (iu *InstrumentUpdate) AddTypeI18nID(i int64) *InstrumentUpdate {
	if iu.addtype_i18n_id == nil {
		iu.addtype_i18n_id = &i
	} else {
		*iu.addtype_i18n_id += i
	}
	return iu
}

// ClearTypeI18nID clears the value of type_i18n_id.
func (iu *InstrumentUpdate) ClearTypeI18nID() *InstrumentUpdate {
	iu.type_i18n_id = nil
	iu.cleartype_i18n_id = true
	return iu
}

// AddPaymentIDs adds the payments edge to Payment by ids.
func (iu *InstrumentUpdate) AddPaymentIDs(ids ...int) *InstrumentUpdate {
	if iu.payments == nil {
		iu.payments = make(map[int]struct{})
	}
	for i := range ids {
		iu.payments[ids[i]] = struct{}{}
	}
	return iu
}

// AddPayments adds the payments edges to Payment.
func (iu *InstrumentUpdate) AddPayments(p ...*Payment) *InstrumentUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iu.AddPaymentIDs(ids...)
}

// RemovePaymentIDs removes the payments edge to Payment by ids.
func (iu *InstrumentUpdate) RemovePaymentIDs(ids ...int) *InstrumentUpdate {
	if iu.removedPayments == nil {
		iu.removedPayments = make(map[int]struct{})
	}
	for i := range ids {
		iu.removedPayments[ids[i]] = struct{}{}
	}
	return iu
}

// RemovePayments removes payments edges to Payment.
func (iu *InstrumentUpdate) RemovePayments(p ...*Payment) *InstrumentUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iu.RemovePaymentIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (iu *InstrumentUpdate) Save(ctx context.Context) (int, error) {
	if iu._type != nil {
		if err := instrument.TypeValidator(*iu._type); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"type\": %v", err)
		}
	}
	return iu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InstrumentUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InstrumentUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InstrumentUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *InstrumentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   instrument.Table,
			Columns: instrument.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: instrument.FieldID,
			},
		},
	}
	if ps := iu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := iu._type; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: instrument.FieldType,
		})
	}
	if value := iu.type_i18n_id; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: instrument.FieldTypeI18nID,
		})
	}
	if value := iu.addtype_i18n_id; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: instrument.FieldTypeI18nID,
		})
	}
	if iu.cleartype_i18n_id {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: instrument.FieldTypeI18nID,
		})
	}
	if nodes := iu.removedPayments; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   instrument.PaymentsTable,
			Columns: []string{instrument.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.payments; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   instrument.PaymentsTable,
			Columns: []string{instrument.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// InstrumentUpdateOne is the builder for updating a single Instrument entity.
type InstrumentUpdateOne struct {
	config
	id                int
	_type             *string
	type_i18n_id      *int64
	addtype_i18n_id   *int64
	cleartype_i18n_id bool
	payments          map[int]struct{}
	removedPayments   map[int]struct{}
}

// SetType sets the type field.
func (iuo *InstrumentUpdateOne) SetType(s string) *InstrumentUpdateOne {
	iuo._type = &s
	return iuo
}

// SetTypeI18nID sets the type_i18n_id field.
func (iuo *InstrumentUpdateOne) SetTypeI18nID(i int64) *InstrumentUpdateOne {
	iuo.type_i18n_id = &i
	iuo.addtype_i18n_id = nil
	return iuo
}

// SetNillableTypeI18nID sets the type_i18n_id field if the given value is not nil.
func (iuo *InstrumentUpdateOne) SetNillableTypeI18nID(i *int64) *InstrumentUpdateOne {
	if i != nil {
		iuo.SetTypeI18nID(*i)
	}
	return iuo
}

// AddTypeI18nID adds i to type_i18n_id.
func (iuo *InstrumentUpdateOne) AddTypeI18nID(i int64) *InstrumentUpdateOne {
	if iuo.addtype_i18n_id == nil {
		iuo.addtype_i18n_id = &i
	} else {
		*iuo.addtype_i18n_id += i
	}
	return iuo
}

// ClearTypeI18nID clears the value of type_i18n_id.
func (iuo *InstrumentUpdateOne) ClearTypeI18nID() *InstrumentUpdateOne {
	iuo.type_i18n_id = nil
	iuo.cleartype_i18n_id = true
	return iuo
}

// AddPaymentIDs adds the payments edge to Payment by ids.
func (iuo *InstrumentUpdateOne) AddPaymentIDs(ids ...int) *InstrumentUpdateOne {
	if iuo.payments == nil {
		iuo.payments = make(map[int]struct{})
	}
	for i := range ids {
		iuo.payments[ids[i]] = struct{}{}
	}
	return iuo
}

// AddPayments adds the payments edges to Payment.
func (iuo *InstrumentUpdateOne) AddPayments(p ...*Payment) *InstrumentUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iuo.AddPaymentIDs(ids...)
}

// RemovePaymentIDs removes the payments edge to Payment by ids.
func (iuo *InstrumentUpdateOne) RemovePaymentIDs(ids ...int) *InstrumentUpdateOne {
	if iuo.removedPayments == nil {
		iuo.removedPayments = make(map[int]struct{})
	}
	for i := range ids {
		iuo.removedPayments[ids[i]] = struct{}{}
	}
	return iuo
}

// RemovePayments removes payments edges to Payment.
func (iuo *InstrumentUpdateOne) RemovePayments(p ...*Payment) *InstrumentUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iuo.RemovePaymentIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (iuo *InstrumentUpdateOne) Save(ctx context.Context) (*Instrument, error) {
	if iuo._type != nil {
		if err := instrument.TypeValidator(*iuo._type); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"type\": %v", err)
		}
	}
	return iuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InstrumentUpdateOne) SaveX(ctx context.Context) *Instrument {
	i, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return i
}

// Exec executes the query on the entity.
func (iuo *InstrumentUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InstrumentUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *InstrumentUpdateOne) sqlSave(ctx context.Context) (i *Instrument, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   instrument.Table,
			Columns: instrument.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  iuo.id,
				Type:   field.TypeInt,
				Column: instrument.FieldID,
			},
		},
	}
	if value := iuo._type; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: instrument.FieldType,
		})
	}
	if value := iuo.type_i18n_id; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: instrument.FieldTypeI18nID,
		})
	}
	if value := iuo.addtype_i18n_id; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: instrument.FieldTypeI18nID,
		})
	}
	if iuo.cleartype_i18n_id {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: instrument.FieldTypeI18nID,
		})
	}
	if nodes := iuo.removedPayments; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   instrument.PaymentsTable,
			Columns: []string{instrument.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.payments; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   instrument.PaymentsTable,
			Columns: []string{instrument.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	i = &Instrument{config: iuo.config}
	_spec.Assign = i.assignValues
	_spec.ScanValues = i.scanValues()
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return i, nil
}
