// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/billing/internal/pkg/ent/plans"
	"github.com/pepeunlimited/billing/internal/pkg/ent/predicate"
	"github.com/pepeunlimited/billing/internal/pkg/ent/subscriptions"
)

// SubscriptionsUpdate is the builder for updating Subscriptions entities.
type SubscriptionsUpdate struct {
	config
	plans        map[int]struct{}
	removedPlans map[int]struct{}
	predicates   []predicate.Subscriptions
}

// Where adds a new predicate for the builder.
func (su *SubscriptionsUpdate) Where(ps ...predicate.Subscriptions) *SubscriptionsUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// AddPlanIDs adds the plans edge to Plans by ids.
func (su *SubscriptionsUpdate) AddPlanIDs(ids ...int) *SubscriptionsUpdate {
	if su.plans == nil {
		su.plans = make(map[int]struct{})
	}
	for i := range ids {
		su.plans[ids[i]] = struct{}{}
	}
	return su
}

// AddPlans adds the plans edges to Plans.
func (su *SubscriptionsUpdate) AddPlans(p ...*Plans) *SubscriptionsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddPlanIDs(ids...)
}

// RemovePlanIDs removes the plans edge to Plans by ids.
func (su *SubscriptionsUpdate) RemovePlanIDs(ids ...int) *SubscriptionsUpdate {
	if su.removedPlans == nil {
		su.removedPlans = make(map[int]struct{})
	}
	for i := range ids {
		su.removedPlans[ids[i]] = struct{}{}
	}
	return su
}

// RemovePlans removes plans edges to Plans.
func (su *SubscriptionsUpdate) RemovePlans(p ...*Plans) *SubscriptionsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemovePlanIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *SubscriptionsUpdate) Save(ctx context.Context) (int, error) {
	return su.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubscriptionsUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubscriptionsUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubscriptionsUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SubscriptionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subscriptions.Table,
			Columns: subscriptions.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subscriptions.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if nodes := su.removedPlans; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptions.PlansTable,
			Columns: []string{subscriptions.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plans.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.plans; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptions.PlansTable,
			Columns: []string{subscriptions.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plans.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SubscriptionsUpdateOne is the builder for updating a single Subscriptions entity.
type SubscriptionsUpdateOne struct {
	config
	id           int
	plans        map[int]struct{}
	removedPlans map[int]struct{}
}

// AddPlanIDs adds the plans edge to Plans by ids.
func (suo *SubscriptionsUpdateOne) AddPlanIDs(ids ...int) *SubscriptionsUpdateOne {
	if suo.plans == nil {
		suo.plans = make(map[int]struct{})
	}
	for i := range ids {
		suo.plans[ids[i]] = struct{}{}
	}
	return suo
}

// AddPlans adds the plans edges to Plans.
func (suo *SubscriptionsUpdateOne) AddPlans(p ...*Plans) *SubscriptionsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddPlanIDs(ids...)
}

// RemovePlanIDs removes the plans edge to Plans by ids.
func (suo *SubscriptionsUpdateOne) RemovePlanIDs(ids ...int) *SubscriptionsUpdateOne {
	if suo.removedPlans == nil {
		suo.removedPlans = make(map[int]struct{})
	}
	for i := range ids {
		suo.removedPlans[ids[i]] = struct{}{}
	}
	return suo
}

// RemovePlans removes plans edges to Plans.
func (suo *SubscriptionsUpdateOne) RemovePlans(p ...*Plans) *SubscriptionsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemovePlanIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (suo *SubscriptionsUpdateOne) Save(ctx context.Context) (*Subscriptions, error) {
	return suo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubscriptionsUpdateOne) SaveX(ctx context.Context) *Subscriptions {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *SubscriptionsUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubscriptionsUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SubscriptionsUpdateOne) sqlSave(ctx context.Context) (s *Subscriptions, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subscriptions.Table,
			Columns: subscriptions.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  suo.id,
				Type:   field.TypeInt,
				Column: subscriptions.FieldID,
			},
		},
	}
	if nodes := suo.removedPlans; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptions.PlansTable,
			Columns: []string{subscriptions.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plans.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.plans; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptions.PlansTable,
			Columns: []string{subscriptions.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plans.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Subscriptions{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
