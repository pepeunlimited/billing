// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/billing/internal/pkg/ent/orders"
	"github.com/pepeunlimited/billing/internal/pkg/ent/predicate"
	"github.com/pepeunlimited/billing/internal/pkg/ent/txs"
)

// TxsUpdate is the builder for updating Txs entities.
type TxsUpdate struct {
	config
	status        *string
	created_at    *time.Time
	orders        map[int]struct{}
	clearedOrders bool
	predicates    []predicate.Txs
}

// Where adds a new predicate for the builder.
func (tu *TxsUpdate) Where(ps ...predicate.Txs) *TxsUpdate {
	tu.predicates = append(tu.predicates, ps...)
	return tu
}

// SetStatus sets the status field.
func (tu *TxsUpdate) SetStatus(s string) *TxsUpdate {
	tu.status = &s
	return tu
}

// SetCreatedAt sets the created_at field.
func (tu *TxsUpdate) SetCreatedAt(t time.Time) *TxsUpdate {
	tu.created_at = &t
	return tu
}

// SetOrdersID sets the orders edge to Orders by id.
func (tu *TxsUpdate) SetOrdersID(id int) *TxsUpdate {
	if tu.orders == nil {
		tu.orders = make(map[int]struct{})
	}
	tu.orders[id] = struct{}{}
	return tu
}

// SetNillableOrdersID sets the orders edge to Orders by id if the given value is not nil.
func (tu *TxsUpdate) SetNillableOrdersID(id *int) *TxsUpdate {
	if id != nil {
		tu = tu.SetOrdersID(*id)
	}
	return tu
}

// SetOrders sets the orders edge to Orders.
func (tu *TxsUpdate) SetOrders(o *Orders) *TxsUpdate {
	return tu.SetOrdersID(o.ID)
}

// ClearOrders clears the orders edge to Orders.
func (tu *TxsUpdate) ClearOrders() *TxsUpdate {
	tu.clearedOrders = true
	return tu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tu *TxsUpdate) Save(ctx context.Context) (int, error) {
	if tu.status != nil {
		if err := txs.StatusValidator(*tu.status); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"status\": %v", err)
		}
	}
	if len(tu.orders) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"orders\"")
	}
	return tu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TxsUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TxsUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TxsUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TxsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   txs.Table,
			Columns: txs.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: txs.FieldID,
			},
		},
	}
	if ps := tu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := tu.status; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: txs.FieldStatus,
		})
	}
	if value := tu.created_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: txs.FieldCreatedAt,
		})
	}
	if tu.clearedOrders {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   txs.OrdersTable,
			Columns: []string{txs.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.orders; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   txs.OrdersTable,
			Columns: []string{txs.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TxsUpdateOne is the builder for updating a single Txs entity.
type TxsUpdateOne struct {
	config
	id            int
	status        *string
	created_at    *time.Time
	orders        map[int]struct{}
	clearedOrders bool
}

// SetStatus sets the status field.
func (tuo *TxsUpdateOne) SetStatus(s string) *TxsUpdateOne {
	tuo.status = &s
	return tuo
}

// SetCreatedAt sets the created_at field.
func (tuo *TxsUpdateOne) SetCreatedAt(t time.Time) *TxsUpdateOne {
	tuo.created_at = &t
	return tuo
}

// SetOrdersID sets the orders edge to Orders by id.
func (tuo *TxsUpdateOne) SetOrdersID(id int) *TxsUpdateOne {
	if tuo.orders == nil {
		tuo.orders = make(map[int]struct{})
	}
	tuo.orders[id] = struct{}{}
	return tuo
}

// SetNillableOrdersID sets the orders edge to Orders by id if the given value is not nil.
func (tuo *TxsUpdateOne) SetNillableOrdersID(id *int) *TxsUpdateOne {
	if id != nil {
		tuo = tuo.SetOrdersID(*id)
	}
	return tuo
}

// SetOrders sets the orders edge to Orders.
func (tuo *TxsUpdateOne) SetOrders(o *Orders) *TxsUpdateOne {
	return tuo.SetOrdersID(o.ID)
}

// ClearOrders clears the orders edge to Orders.
func (tuo *TxsUpdateOne) ClearOrders() *TxsUpdateOne {
	tuo.clearedOrders = true
	return tuo
}

// Save executes the query and returns the updated entity.
func (tuo *TxsUpdateOne) Save(ctx context.Context) (*Txs, error) {
	if tuo.status != nil {
		if err := txs.StatusValidator(*tuo.status); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"status\": %v", err)
		}
	}
	if len(tuo.orders) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"orders\"")
	}
	return tuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TxsUpdateOne) SaveX(ctx context.Context) *Txs {
	t, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return t
}

// Exec executes the query on the entity.
func (tuo *TxsUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TxsUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TxsUpdateOne) sqlSave(ctx context.Context) (t *Txs, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   txs.Table,
			Columns: txs.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  tuo.id,
				Type:   field.TypeInt,
				Column: txs.FieldID,
			},
		},
	}
	if value := tuo.status; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: txs.FieldStatus,
		})
	}
	if value := tuo.created_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: txs.FieldCreatedAt,
		})
	}
	if tuo.clearedOrders {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   txs.OrdersTable,
			Columns: []string{txs.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.orders; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   txs.OrdersTable,
			Columns: []string{txs.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	t = &Txs{config: tuo.config}
	_spec.Assign = t.assignValues
	_spec.ScanValues = t.scanValues()
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return t, nil
}
