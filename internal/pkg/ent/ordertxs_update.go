// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/billing/internal/pkg/ent/orders"
	"github.com/pepeunlimited/billing/internal/pkg/ent/ordertxs"
	"github.com/pepeunlimited/billing/internal/pkg/ent/predicate"
)

// OrderTXsUpdate is the builder for updating OrderTXs entities.
type OrderTXsUpdate struct {
	config
	orders        map[int]struct{}
	clearedOrders bool
	predicates    []predicate.OrderTXs
}

// Where adds a new predicate for the builder.
func (ordertxsupdate *OrderTXsUpdate) Where(ps ...predicate.OrderTXs) *OrderTXsUpdate {
	ordertxsupdate.predicates = append(ordertxsupdate.predicates, ps...)
	return ordertxsupdate
}

// SetOrdersID sets the orders edge to Orders by id.
func (ordertxsupdate *OrderTXsUpdate) SetOrdersID(id int) *OrderTXsUpdate {
	if ordertxsupdate.orders == nil {
		ordertxsupdate.orders = make(map[int]struct{})
	}
	ordertxsupdate.orders[id] = struct{}{}
	return ordertxsupdate
}

// SetNillableOrdersID sets the orders edge to Orders by id if the given value is not nil.
func (ordertxsupdate *OrderTXsUpdate) SetNillableOrdersID(id *int) *OrderTXsUpdate {
	if id != nil {
		ordertxsupdate = ordertxsupdate.SetOrdersID(*id)
	}
	return ordertxsupdate
}

// SetOrders sets the orders edge to Orders.
func (ordertxsupdate *OrderTXsUpdate) SetOrders(o *Orders) *OrderTXsUpdate {
	return ordertxsupdate.SetOrdersID(o.ID)
}

// ClearOrders clears the orders edge to Orders.
func (ordertxsupdate *OrderTXsUpdate) ClearOrders() *OrderTXsUpdate {
	ordertxsupdate.clearedOrders = true
	return ordertxsupdate
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ordertxsupdate *OrderTXsUpdate) Save(ctx context.Context) (int, error) {
	if len(ordertxsupdate.orders) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"orders\"")
	}
	return ordertxsupdate.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (ordertxsupdate *OrderTXsUpdate) SaveX(ctx context.Context) int {
	affected, err := ordertxsupdate.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ordertxsupdate *OrderTXsUpdate) Exec(ctx context.Context) error {
	_, err := ordertxsupdate.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ordertxsupdate *OrderTXsUpdate) ExecX(ctx context.Context) {
	if err := ordertxsupdate.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ordertxsupdate *OrderTXsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ordertxs.Table,
			Columns: ordertxs.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ordertxs.FieldID,
			},
		},
	}
	if ps := ordertxsupdate.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ordertxsupdate.clearedOrders {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordertxs.OrdersTable,
			Columns: []string{ordertxs.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ordertxsupdate.orders; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordertxs.OrdersTable,
			Columns: []string{ordertxs.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ordertxsupdate.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OrderTXsUpdateOne is the builder for updating a single OrderTXs entity.
type OrderTXsUpdateOne struct {
	config
	id            int
	orders        map[int]struct{}
	clearedOrders bool
}

// SetOrdersID sets the orders edge to Orders by id.
func (ordertxsupdateone *OrderTXsUpdateOne) SetOrdersID(id int) *OrderTXsUpdateOne {
	if ordertxsupdateone.orders == nil {
		ordertxsupdateone.orders = make(map[int]struct{})
	}
	ordertxsupdateone.orders[id] = struct{}{}
	return ordertxsupdateone
}

// SetNillableOrdersID sets the orders edge to Orders by id if the given value is not nil.
func (ordertxsupdateone *OrderTXsUpdateOne) SetNillableOrdersID(id *int) *OrderTXsUpdateOne {
	if id != nil {
		ordertxsupdateone = ordertxsupdateone.SetOrdersID(*id)
	}
	return ordertxsupdateone
}

// SetOrders sets the orders edge to Orders.
func (ordertxsupdateone *OrderTXsUpdateOne) SetOrders(o *Orders) *OrderTXsUpdateOne {
	return ordertxsupdateone.SetOrdersID(o.ID)
}

// ClearOrders clears the orders edge to Orders.
func (ordertxsupdateone *OrderTXsUpdateOne) ClearOrders() *OrderTXsUpdateOne {
	ordertxsupdateone.clearedOrders = true
	return ordertxsupdateone
}

// Save executes the query and returns the updated entity.
func (ordertxsupdateone *OrderTXsUpdateOne) Save(ctx context.Context) (*OrderTXs, error) {
	if len(ordertxsupdateone.orders) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"orders\"")
	}
	return ordertxsupdateone.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (ordertxsupdateone *OrderTXsUpdateOne) SaveX(ctx context.Context) *OrderTXs {
	ordertxs, err := ordertxsupdateone.Save(ctx)
	if err != nil {
		panic(err)
	}
	return ordertxs
}

// Exec executes the query on the entity.
func (ordertxsupdateone *OrderTXsUpdateOne) Exec(ctx context.Context) error {
	_, err := ordertxsupdateone.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ordertxsupdateone *OrderTXsUpdateOne) ExecX(ctx context.Context) {
	if err := ordertxsupdateone.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ordertxsupdateone *OrderTXsUpdateOne) sqlSave(ctx context.Context) (ordertxs *OrderTXs, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ordertxs.Table,
			Columns: ordertxs.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  ordertxsupdateone.id,
				Type:   field.TypeInt,
				Column: ordertxs.FieldID,
			},
		},
	}
	if ordertxsupdateone.clearedOrders {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordertxs.OrdersTable,
			Columns: []string{ordertxs.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ordertxsupdateone.orders; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ordertxs.OrdersTable,
			Columns: []string{ordertxs.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	ordertxs = &OrderTXs{config: ordertxsupdateone.config}
	_spec.Assign = ordertxs.assignValues
	_spec.ScanValues = ordertxs.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ordertxsupdateone.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return ordertxs, nil
}
