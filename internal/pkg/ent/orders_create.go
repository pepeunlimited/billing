// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/billing/internal/pkg/ent/orderitems"
	"github.com/pepeunlimited/billing/internal/pkg/ent/orders"
	"github.com/pepeunlimited/billing/internal/pkg/ent/ordertxs"
	"github.com/pepeunlimited/billing/internal/pkg/ent/paymentinstruments"
)

// OrdersCreate is the builder for creating a Orders entity.
type OrdersCreate struct {
	config
	order_txs           map[int]struct{}
	order_items         map[int]struct{}
	payment_instruments map[int]struct{}
}

// AddOrderTxIDs adds the order_txs edge to OrderTXs by ids.
func (oc *OrdersCreate) AddOrderTxIDs(ids ...int) *OrdersCreate {
	if oc.order_txs == nil {
		oc.order_txs = make(map[int]struct{})
	}
	for i := range ids {
		oc.order_txs[ids[i]] = struct{}{}
	}
	return oc
}

// AddOrderTxs adds the order_txs edges to OrderTXs.
func (oc *OrdersCreate) AddOrderTxs(o ...*OrderTXs) *OrdersCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddOrderTxIDs(ids...)
}

// AddOrderItemIDs adds the order_items edge to OrderItems by ids.
func (oc *OrdersCreate) AddOrderItemIDs(ids ...int) *OrdersCreate {
	if oc.order_items == nil {
		oc.order_items = make(map[int]struct{})
	}
	for i := range ids {
		oc.order_items[ids[i]] = struct{}{}
	}
	return oc
}

// AddOrderItems adds the order_items edges to OrderItems.
func (oc *OrdersCreate) AddOrderItems(o ...*OrderItems) *OrdersCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddOrderItemIDs(ids...)
}

// AddPaymentInstrumentIDs adds the payment_instruments edge to PaymentInstruments by ids.
func (oc *OrdersCreate) AddPaymentInstrumentIDs(ids ...int) *OrdersCreate {
	if oc.payment_instruments == nil {
		oc.payment_instruments = make(map[int]struct{})
	}
	for i := range ids {
		oc.payment_instruments[ids[i]] = struct{}{}
	}
	return oc
}

// AddPaymentInstruments adds the payment_instruments edges to PaymentInstruments.
func (oc *OrdersCreate) AddPaymentInstruments(p ...*PaymentInstruments) *OrdersCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return oc.AddPaymentInstrumentIDs(ids...)
}

// Save creates the Orders in the database.
func (oc *OrdersCreate) Save(ctx context.Context) (*Orders, error) {
	return oc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrdersCreate) SaveX(ctx context.Context) *Orders {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (oc *OrdersCreate) sqlSave(ctx context.Context) (*Orders, error) {
	var (
		o     = &Orders{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orders.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orders.FieldID,
			},
		}
	)
	if nodes := oc.order_txs; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orders.OrderTxsTable,
			Columns: []string{orders.OrderTxsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordertxs.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.order_items; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orders.OrderItemsTable,
			Columns: []string{orders.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitems.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.payment_instruments; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orders.PaymentInstrumentsTable,
			Columns: []string{orders.PaymentInstrumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: paymentinstruments.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	o.ID = int(id)
	return o, nil
}
