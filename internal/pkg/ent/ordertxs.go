// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pepeunlimited/billing/internal/pkg/ent/orders"
)

// OrderTXs is the model entity for the OrderTXs schema.
type OrderTXs struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderTXsQuery when eager-loading is set.
	Edges            OrderTXsEdges `json:"edges"`
	orders_order_txs *int
}

// OrderTXsEdges holds the relations/edges for other nodes in the graph.
type OrderTXsEdges struct {
	// Orders holds the value of the orders edge.
	Orders *Orders
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderTXsEdges) OrdersOrErr() (*Orders, error) {
	if e.loadedTypes[0] {
		if e.Orders == nil {
			// The edge orders was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: orders.Label}
		}
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderTXs) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*OrderTXs) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // orders_order_txs
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderTXs fields.
func (ordertxs *OrderTXs) assignValues(values ...interface{}) error {
	if m, n := len(values), len(ordertxs.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ordertxs.ID = int(value.Int64)
	values = values[1:]
	values = values[0:]
	if len(values) == len(ordertxs.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field orders_order_txs", value)
		} else if value.Valid {
			ordertxs.orders_order_txs = new(int)
			*ordertxs.orders_order_txs = int(value.Int64)
		}
	}
	return nil
}

// QueryOrders queries the orders edge of the OrderTXs.
func (ordertxs *OrderTXs) QueryOrders() *OrdersQuery {
	return (&OrderTXsClient{ordertxs.config}).QueryOrders(ordertxs)
}

// Update returns a builder for updating this OrderTXs.
// Note that, you need to call OrderTXs.Unwrap() before calling this method, if this OrderTXs
// was returned from a transaction, and the transaction was committed or rolled back.
func (ordertxs *OrderTXs) Update() *OrderTXsUpdateOne {
	return (&OrderTXsClient{ordertxs.config}).UpdateOne(ordertxs)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ordertxs *OrderTXs) Unwrap() *OrderTXs {
	tx, ok := ordertxs.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderTXs is not a transactional entity")
	}
	ordertxs.config.driver = tx.drv
	return ordertxs
}

// String implements the fmt.Stringer.
func (ordertxs *OrderTXs) String() string {
	var builder strings.Builder
	builder.WriteString("OrderTXs(")
	builder.WriteString(fmt.Sprintf("id=%v", ordertxs.ID))
	builder.WriteByte(')')
	return builder.String()
}

// OrderTXsSlice is a parsable slice of OrderTXs.
type OrderTXsSlice []*OrderTXs

func (ordertxs OrderTXsSlice) config(cfg config) {
	for _i := range ordertxs {
		ordertxs[_i].config = cfg
	}
}
