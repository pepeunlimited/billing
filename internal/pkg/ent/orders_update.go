// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/billing/internal/pkg/ent/orderitems"
	"github.com/pepeunlimited/billing/internal/pkg/ent/orders"
	"github.com/pepeunlimited/billing/internal/pkg/ent/ordertxs"
	"github.com/pepeunlimited/billing/internal/pkg/ent/paymentinstruments"
	"github.com/pepeunlimited/billing/internal/pkg/ent/predicate"
)

// OrdersUpdate is the builder for updating Orders entities.
type OrdersUpdate struct {
	config
	order_txs                 map[int]struct{}
	order_items               map[int]struct{}
	payment_instruments       map[int]struct{}
	removedOrderTxs           map[int]struct{}
	removedOrderItems         map[int]struct{}
	removedPaymentInstruments map[int]struct{}
	predicates                []predicate.Orders
}

// Where adds a new predicate for the builder.
func (ou *OrdersUpdate) Where(ps ...predicate.Orders) *OrdersUpdate {
	ou.predicates = append(ou.predicates, ps...)
	return ou
}

// AddOrderTxIDs adds the order_txs edge to OrderTXs by ids.
func (ou *OrdersUpdate) AddOrderTxIDs(ids ...int) *OrdersUpdate {
	if ou.order_txs == nil {
		ou.order_txs = make(map[int]struct{})
	}
	for i := range ids {
		ou.order_txs[ids[i]] = struct{}{}
	}
	return ou
}

// AddOrderTxs adds the order_txs edges to OrderTXs.
func (ou *OrdersUpdate) AddOrderTxs(o ...*OrderTXs) *OrdersUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddOrderTxIDs(ids...)
}

// AddOrderItemIDs adds the order_items edge to OrderItems by ids.
func (ou *OrdersUpdate) AddOrderItemIDs(ids ...int) *OrdersUpdate {
	if ou.order_items == nil {
		ou.order_items = make(map[int]struct{})
	}
	for i := range ids {
		ou.order_items[ids[i]] = struct{}{}
	}
	return ou
}

// AddOrderItems adds the order_items edges to OrderItems.
func (ou *OrdersUpdate) AddOrderItems(o ...*OrderItems) *OrdersUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddOrderItemIDs(ids...)
}

// AddPaymentInstrumentIDs adds the payment_instruments edge to PaymentInstruments by ids.
func (ou *OrdersUpdate) AddPaymentInstrumentIDs(ids ...int) *OrdersUpdate {
	if ou.payment_instruments == nil {
		ou.payment_instruments = make(map[int]struct{})
	}
	for i := range ids {
		ou.payment_instruments[ids[i]] = struct{}{}
	}
	return ou
}

// AddPaymentInstruments adds the payment_instruments edges to PaymentInstruments.
func (ou *OrdersUpdate) AddPaymentInstruments(p ...*PaymentInstruments) *OrdersUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.AddPaymentInstrumentIDs(ids...)
}

// RemoveOrderTxIDs removes the order_txs edge to OrderTXs by ids.
func (ou *OrdersUpdate) RemoveOrderTxIDs(ids ...int) *OrdersUpdate {
	if ou.removedOrderTxs == nil {
		ou.removedOrderTxs = make(map[int]struct{})
	}
	for i := range ids {
		ou.removedOrderTxs[ids[i]] = struct{}{}
	}
	return ou
}

// RemoveOrderTxs removes order_txs edges to OrderTXs.
func (ou *OrdersUpdate) RemoveOrderTxs(o ...*OrderTXs) *OrdersUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveOrderTxIDs(ids...)
}

// RemoveOrderItemIDs removes the order_items edge to OrderItems by ids.
func (ou *OrdersUpdate) RemoveOrderItemIDs(ids ...int) *OrdersUpdate {
	if ou.removedOrderItems == nil {
		ou.removedOrderItems = make(map[int]struct{})
	}
	for i := range ids {
		ou.removedOrderItems[ids[i]] = struct{}{}
	}
	return ou
}

// RemoveOrderItems removes order_items edges to OrderItems.
func (ou *OrdersUpdate) RemoveOrderItems(o ...*OrderItems) *OrdersUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveOrderItemIDs(ids...)
}

// RemovePaymentInstrumentIDs removes the payment_instruments edge to PaymentInstruments by ids.
func (ou *OrdersUpdate) RemovePaymentInstrumentIDs(ids ...int) *OrdersUpdate {
	if ou.removedPaymentInstruments == nil {
		ou.removedPaymentInstruments = make(map[int]struct{})
	}
	for i := range ids {
		ou.removedPaymentInstruments[ids[i]] = struct{}{}
	}
	return ou
}

// RemovePaymentInstruments removes payment_instruments edges to PaymentInstruments.
func (ou *OrdersUpdate) RemovePaymentInstruments(p ...*PaymentInstruments) *OrdersUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.RemovePaymentInstrumentIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ou *OrdersUpdate) Save(ctx context.Context) (int, error) {
	return ou.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrdersUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrdersUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrdersUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OrdersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orders.Table,
			Columns: orders.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orders.FieldID,
			},
		},
	}
	if ps := ou.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if nodes := ou.removedOrderTxs; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orders.OrderTxsTable,
			Columns: []string{orders.OrderTxsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordertxs.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.order_txs; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orders.OrderTxsTable,
			Columns: []string{orders.OrderTxsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordertxs.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ou.removedOrderItems; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orders.OrderItemsTable,
			Columns: []string{orders.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitems.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.order_items; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orders.OrderItemsTable,
			Columns: []string{orders.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitems.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ou.removedPaymentInstruments; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orders.PaymentInstrumentsTable,
			Columns: []string{orders.PaymentInstrumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: paymentinstruments.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.payment_instruments; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orders.PaymentInstrumentsTable,
			Columns: []string{orders.PaymentInstrumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: paymentinstruments.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OrdersUpdateOne is the builder for updating a single Orders entity.
type OrdersUpdateOne struct {
	config
	id                        int
	order_txs                 map[int]struct{}
	order_items               map[int]struct{}
	payment_instruments       map[int]struct{}
	removedOrderTxs           map[int]struct{}
	removedOrderItems         map[int]struct{}
	removedPaymentInstruments map[int]struct{}
}

// AddOrderTxIDs adds the order_txs edge to OrderTXs by ids.
func (ouo *OrdersUpdateOne) AddOrderTxIDs(ids ...int) *OrdersUpdateOne {
	if ouo.order_txs == nil {
		ouo.order_txs = make(map[int]struct{})
	}
	for i := range ids {
		ouo.order_txs[ids[i]] = struct{}{}
	}
	return ouo
}

// AddOrderTxs adds the order_txs edges to OrderTXs.
func (ouo *OrdersUpdateOne) AddOrderTxs(o ...*OrderTXs) *OrdersUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddOrderTxIDs(ids...)
}

// AddOrderItemIDs adds the order_items edge to OrderItems by ids.
func (ouo *OrdersUpdateOne) AddOrderItemIDs(ids ...int) *OrdersUpdateOne {
	if ouo.order_items == nil {
		ouo.order_items = make(map[int]struct{})
	}
	for i := range ids {
		ouo.order_items[ids[i]] = struct{}{}
	}
	return ouo
}

// AddOrderItems adds the order_items edges to OrderItems.
func (ouo *OrdersUpdateOne) AddOrderItems(o ...*OrderItems) *OrdersUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddOrderItemIDs(ids...)
}

// AddPaymentInstrumentIDs adds the payment_instruments edge to PaymentInstruments by ids.
func (ouo *OrdersUpdateOne) AddPaymentInstrumentIDs(ids ...int) *OrdersUpdateOne {
	if ouo.payment_instruments == nil {
		ouo.payment_instruments = make(map[int]struct{})
	}
	for i := range ids {
		ouo.payment_instruments[ids[i]] = struct{}{}
	}
	return ouo
}

// AddPaymentInstruments adds the payment_instruments edges to PaymentInstruments.
func (ouo *OrdersUpdateOne) AddPaymentInstruments(p ...*PaymentInstruments) *OrdersUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.AddPaymentInstrumentIDs(ids...)
}

// RemoveOrderTxIDs removes the order_txs edge to OrderTXs by ids.
func (ouo *OrdersUpdateOne) RemoveOrderTxIDs(ids ...int) *OrdersUpdateOne {
	if ouo.removedOrderTxs == nil {
		ouo.removedOrderTxs = make(map[int]struct{})
	}
	for i := range ids {
		ouo.removedOrderTxs[ids[i]] = struct{}{}
	}
	return ouo
}

// RemoveOrderTxs removes order_txs edges to OrderTXs.
func (ouo *OrdersUpdateOne) RemoveOrderTxs(o ...*OrderTXs) *OrdersUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveOrderTxIDs(ids...)
}

// RemoveOrderItemIDs removes the order_items edge to OrderItems by ids.
func (ouo *OrdersUpdateOne) RemoveOrderItemIDs(ids ...int) *OrdersUpdateOne {
	if ouo.removedOrderItems == nil {
		ouo.removedOrderItems = make(map[int]struct{})
	}
	for i := range ids {
		ouo.removedOrderItems[ids[i]] = struct{}{}
	}
	return ouo
}

// RemoveOrderItems removes order_items edges to OrderItems.
func (ouo *OrdersUpdateOne) RemoveOrderItems(o ...*OrderItems) *OrdersUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveOrderItemIDs(ids...)
}

// RemovePaymentInstrumentIDs removes the payment_instruments edge to PaymentInstruments by ids.
func (ouo *OrdersUpdateOne) RemovePaymentInstrumentIDs(ids ...int) *OrdersUpdateOne {
	if ouo.removedPaymentInstruments == nil {
		ouo.removedPaymentInstruments = make(map[int]struct{})
	}
	for i := range ids {
		ouo.removedPaymentInstruments[ids[i]] = struct{}{}
	}
	return ouo
}

// RemovePaymentInstruments removes payment_instruments edges to PaymentInstruments.
func (ouo *OrdersUpdateOne) RemovePaymentInstruments(p ...*PaymentInstruments) *OrdersUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.RemovePaymentInstrumentIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ouo *OrdersUpdateOne) Save(ctx context.Context) (*Orders, error) {
	return ouo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrdersUpdateOne) SaveX(ctx context.Context) *Orders {
	o, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return o
}

// Exec executes the query on the entity.
func (ouo *OrdersUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrdersUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OrdersUpdateOne) sqlSave(ctx context.Context) (o *Orders, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orders.Table,
			Columns: orders.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  ouo.id,
				Type:   field.TypeInt,
				Column: orders.FieldID,
			},
		},
	}
	if nodes := ouo.removedOrderTxs; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orders.OrderTxsTable,
			Columns: []string{orders.OrderTxsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordertxs.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.order_txs; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orders.OrderTxsTable,
			Columns: []string{orders.OrderTxsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ordertxs.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ouo.removedOrderItems; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orders.OrderItemsTable,
			Columns: []string{orders.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitems.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.order_items; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orders.OrderItemsTable,
			Columns: []string{orders.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderitems.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ouo.removedPaymentInstruments; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orders.PaymentInstrumentsTable,
			Columns: []string{orders.PaymentInstrumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: paymentinstruments.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.payment_instruments; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orders.PaymentInstrumentsTable,
			Columns: []string{orders.PaymentInstrumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: paymentinstruments.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	o = &Orders{config: ouo.config}
	_spec.Assign = o.assignValues
	_spec.ScanValues = o.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return o, nil
}
