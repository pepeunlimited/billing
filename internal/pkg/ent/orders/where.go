// Code generated by entc, DO NOT EDIT.

package orders

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/pepeunlimited/billing/internal/pkg/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Orders {
	return predicate.Orders(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Orders {
	return predicate.Orders(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	},
	)
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Orders {
	return predicate.Orders(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	},
	)
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Orders {
	return predicate.Orders(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	},
	)
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Orders {
	return predicate.Orders(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	},
	)
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Orders {
	return predicate.Orders(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	},
	)
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Orders {
	return predicate.Orders(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	},
	)
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Orders {
	return predicate.Orders(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	},
	)
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Orders {
	return predicate.Orders(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	},
	)
}

// HasOrderTxs applies the HasEdge predicate on the "order_txs" edge.
func HasOrderTxs() predicate.Orders {
	return predicate.Orders(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderTxsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderTxsTable, OrderTxsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	},
	)
}

// HasOrderTxsWith applies the HasEdge predicate on the "order_txs" edge with a given conditions (other predicates).
func HasOrderTxsWith(preds ...predicate.OrderTXs) predicate.Orders {
	return predicate.Orders(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderTxsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderTxsTable, OrderTxsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	},
	)
}

// HasOrderItems applies the HasEdge predicate on the "order_items" edge.
func HasOrderItems() predicate.Orders {
	return predicate.Orders(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemsTable, OrderItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	},
	)
}

// HasOrderItemsWith applies the HasEdge predicate on the "order_items" edge with a given conditions (other predicates).
func HasOrderItemsWith(preds ...predicate.OrderItems) predicate.Orders {
	return predicate.Orders(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderItemsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemsTable, OrderItemsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	},
	)
}

// HasPaymentInstruments applies the HasEdge predicate on the "payment_instruments" edge.
func HasPaymentInstruments() predicate.Orders {
	return predicate.Orders(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PaymentInstrumentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PaymentInstrumentsTable, PaymentInstrumentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	},
	)
}

// HasPaymentInstrumentsWith applies the HasEdge predicate on the "payment_instruments" edge with a given conditions (other predicates).
func HasPaymentInstrumentsWith(preds ...predicate.PaymentInstruments) predicate.Orders {
	return predicate.Orders(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PaymentInstrumentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PaymentInstrumentsTable, PaymentInstrumentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	},
	)
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Orders) predicate.Orders {
	return predicate.Orders(
		func(s *sql.Selector) {
			s1 := s.Clone().SetP(nil)
			for _, p := range predicates {
				p(s1)
			}
			s.Where(s1.P())
		},
	)
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Orders) predicate.Orders {
	return predicate.Orders(
		func(s *sql.Selector) {
			s1 := s.Clone().SetP(nil)
			for i, p := range predicates {
				if i > 0 {
					s1.Or()
				}
				p(s1)
			}
			s.Where(s1.P())
		},
	)
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Orders) predicate.Orders {
	return predicate.Orders(
		func(s *sql.Selector) {
			p(s.Not())
		},
	)
}
