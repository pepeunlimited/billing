// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/billing/internal/pkg/ent/ordertxs"
	"github.com/pepeunlimited/billing/internal/pkg/ent/predicate"
)

// OrderTXsDelete is the builder for deleting a OrderTXs entity.
type OrderTXsDelete struct {
	config
	predicates []predicate.OrderTXs
}

// Where adds a new predicate to the delete builder.
func (ordertxsdelete *OrderTXsDelete) Where(ps ...predicate.OrderTXs) *OrderTXsDelete {
	ordertxsdelete.predicates = append(ordertxsdelete.predicates, ps...)
	return ordertxsdelete
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ordertxsdelete *OrderTXsDelete) Exec(ctx context.Context) (int, error) {
	return ordertxsdelete.sqlExec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (ordertxsdelete *OrderTXsDelete) ExecX(ctx context.Context) int {
	n, err := ordertxsdelete.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ordertxsdelete *OrderTXsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: ordertxs.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ordertxs.FieldID,
			},
		},
	}
	if ps := ordertxsdelete.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return sqlgraph.DeleteNodes(ctx, ordertxsdelete.driver, _spec)
}

// OrderTXsDeleteOne is the builder for deleting a single OrderTXs entity.
type OrderTXsDeleteOne struct {
	ordertxsdelete *OrderTXsDelete
}

// Exec executes the deletion query.
func (ordertxsdeleteone *OrderTXsDeleteOne) Exec(ctx context.Context) error {
	n, err := ordertxsdeleteone.ordertxsdelete.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{ordertxs.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ordertxsdeleteone *OrderTXsDeleteOne) ExecX(ctx context.Context) {
	ordertxsdeleteone.ordertxsdelete.ExecX(ctx)
}
