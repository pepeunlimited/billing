// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/billing/internal/pkg/ent/plans"
	"github.com/pepeunlimited/billing/internal/pkg/ent/subscriptions"
)

// SubscriptionsCreate is the builder for creating a Subscriptions entity.
type SubscriptionsCreate struct {
	config
	plans map[int]struct{}
}

// AddPlanIDs adds the plans edge to Plans by ids.
func (sc *SubscriptionsCreate) AddPlanIDs(ids ...int) *SubscriptionsCreate {
	if sc.plans == nil {
		sc.plans = make(map[int]struct{})
	}
	for i := range ids {
		sc.plans[ids[i]] = struct{}{}
	}
	return sc
}

// AddPlans adds the plans edges to Plans.
func (sc *SubscriptionsCreate) AddPlans(p ...*Plans) *SubscriptionsCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sc.AddPlanIDs(ids...)
}

// Save creates the Subscriptions in the database.
func (sc *SubscriptionsCreate) Save(ctx context.Context) (*Subscriptions, error) {
	return sc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SubscriptionsCreate) SaveX(ctx context.Context) *Subscriptions {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *SubscriptionsCreate) sqlSave(ctx context.Context) (*Subscriptions, error) {
	var (
		s     = &Subscriptions{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: subscriptions.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subscriptions.FieldID,
			},
		}
	)
	if nodes := sc.plans; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptions.PlansTable,
			Columns: []string{subscriptions.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plans.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	s.ID = int(id)
	return s, nil
}
