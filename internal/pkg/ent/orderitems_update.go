// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/billing/internal/pkg/ent/orderitems"
	"github.com/pepeunlimited/billing/internal/pkg/ent/orders"
	"github.com/pepeunlimited/billing/internal/pkg/ent/predicate"
)

// OrderItemsUpdate is the builder for updating OrderItems entities.
type OrderItemsUpdate struct {
	config
	orders        map[int]struct{}
	clearedOrders bool
	predicates    []predicate.OrderItems
}

// Where adds a new predicate for the builder.
func (oiu *OrderItemsUpdate) Where(ps ...predicate.OrderItems) *OrderItemsUpdate {
	oiu.predicates = append(oiu.predicates, ps...)
	return oiu
}

// SetOrdersID sets the orders edge to Orders by id.
func (oiu *OrderItemsUpdate) SetOrdersID(id int) *OrderItemsUpdate {
	if oiu.orders == nil {
		oiu.orders = make(map[int]struct{})
	}
	oiu.orders[id] = struct{}{}
	return oiu
}

// SetNillableOrdersID sets the orders edge to Orders by id if the given value is not nil.
func (oiu *OrderItemsUpdate) SetNillableOrdersID(id *int) *OrderItemsUpdate {
	if id != nil {
		oiu = oiu.SetOrdersID(*id)
	}
	return oiu
}

// SetOrders sets the orders edge to Orders.
func (oiu *OrderItemsUpdate) SetOrders(o *Orders) *OrderItemsUpdate {
	return oiu.SetOrdersID(o.ID)
}

// ClearOrders clears the orders edge to Orders.
func (oiu *OrderItemsUpdate) ClearOrders() *OrderItemsUpdate {
	oiu.clearedOrders = true
	return oiu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (oiu *OrderItemsUpdate) Save(ctx context.Context) (int, error) {
	if len(oiu.orders) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"orders\"")
	}
	return oiu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (oiu *OrderItemsUpdate) SaveX(ctx context.Context) int {
	affected, err := oiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oiu *OrderItemsUpdate) Exec(ctx context.Context) error {
	_, err := oiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiu *OrderItemsUpdate) ExecX(ctx context.Context) {
	if err := oiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oiu *OrderItemsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderitems.Table,
			Columns: orderitems.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderitems.FieldID,
			},
		},
	}
	if ps := oiu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if oiu.clearedOrders {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitems.OrdersTable,
			Columns: []string{orderitems.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.orders; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitems.OrdersTable,
			Columns: []string{orderitems.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oiu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OrderItemsUpdateOne is the builder for updating a single OrderItems entity.
type OrderItemsUpdateOne struct {
	config
	id            int
	orders        map[int]struct{}
	clearedOrders bool
}

// SetOrdersID sets the orders edge to Orders by id.
func (oiuo *OrderItemsUpdateOne) SetOrdersID(id int) *OrderItemsUpdateOne {
	if oiuo.orders == nil {
		oiuo.orders = make(map[int]struct{})
	}
	oiuo.orders[id] = struct{}{}
	return oiuo
}

// SetNillableOrdersID sets the orders edge to Orders by id if the given value is not nil.
func (oiuo *OrderItemsUpdateOne) SetNillableOrdersID(id *int) *OrderItemsUpdateOne {
	if id != nil {
		oiuo = oiuo.SetOrdersID(*id)
	}
	return oiuo
}

// SetOrders sets the orders edge to Orders.
func (oiuo *OrderItemsUpdateOne) SetOrders(o *Orders) *OrderItemsUpdateOne {
	return oiuo.SetOrdersID(o.ID)
}

// ClearOrders clears the orders edge to Orders.
func (oiuo *OrderItemsUpdateOne) ClearOrders() *OrderItemsUpdateOne {
	oiuo.clearedOrders = true
	return oiuo
}

// Save executes the query and returns the updated entity.
func (oiuo *OrderItemsUpdateOne) Save(ctx context.Context) (*OrderItems, error) {
	if len(oiuo.orders) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"orders\"")
	}
	return oiuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (oiuo *OrderItemsUpdateOne) SaveX(ctx context.Context) *OrderItems {
	oi, err := oiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return oi
}

// Exec executes the query on the entity.
func (oiuo *OrderItemsUpdateOne) Exec(ctx context.Context) error {
	_, err := oiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiuo *OrderItemsUpdateOne) ExecX(ctx context.Context) {
	if err := oiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oiuo *OrderItemsUpdateOne) sqlSave(ctx context.Context) (oi *OrderItems, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderitems.Table,
			Columns: orderitems.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  oiuo.id,
				Type:   field.TypeInt,
				Column: orderitems.FieldID,
			},
		},
	}
	if oiuo.clearedOrders {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitems.OrdersTable,
			Columns: []string{orderitems.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.orders; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitems.OrdersTable,
			Columns: []string{orderitems.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	oi = &OrderItems{config: oiuo.config}
	_spec.Assign = oi.assignValues
	_spec.ScanValues = oi.scanValues()
	if err = sqlgraph.UpdateNode(ctx, oiuo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return oi, nil
}
