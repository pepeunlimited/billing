// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/billing/internal/pkg/ent/plans"
	"github.com/pepeunlimited/billing/internal/pkg/ent/subscriptions"
)

// PlansCreate is the builder for creating a Plans entity.
type PlansCreate struct {
	config
	subscriptions map[int]struct{}
}

// SetSubscriptionsID sets the subscriptions edge to Subscriptions by id.
func (pc *PlansCreate) SetSubscriptionsID(id int) *PlansCreate {
	if pc.subscriptions == nil {
		pc.subscriptions = make(map[int]struct{})
	}
	pc.subscriptions[id] = struct{}{}
	return pc
}

// SetNillableSubscriptionsID sets the subscriptions edge to Subscriptions by id if the given value is not nil.
func (pc *PlansCreate) SetNillableSubscriptionsID(id *int) *PlansCreate {
	if id != nil {
		pc = pc.SetSubscriptionsID(*id)
	}
	return pc
}

// SetSubscriptions sets the subscriptions edge to Subscriptions.
func (pc *PlansCreate) SetSubscriptions(s *Subscriptions) *PlansCreate {
	return pc.SetSubscriptionsID(s.ID)
}

// Save creates the Plans in the database.
func (pc *PlansCreate) Save(ctx context.Context) (*Plans, error) {
	if len(pc.subscriptions) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"subscriptions\"")
	}
	return pc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlansCreate) SaveX(ctx context.Context) *Plans {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PlansCreate) sqlSave(ctx context.Context) (*Plans, error) {
	var (
		pl    = &Plans{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: plans.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: plans.FieldID,
			},
		}
	)
	if nodes := pc.subscriptions; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plans.SubscriptionsTable,
			Columns: []string{plans.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subscriptions.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pl.ID = int(id)
	return pl, nil
}
