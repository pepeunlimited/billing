// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/billing/internal/pkg/ent/orderitems"
	"github.com/pepeunlimited/billing/internal/pkg/ent/orders"
)

// OrderItemsCreate is the builder for creating a OrderItems entity.
type OrderItemsCreate struct {
	config
	orders map[int]struct{}
}

// SetOrdersID sets the orders edge to Orders by id.
func (oic *OrderItemsCreate) SetOrdersID(id int) *OrderItemsCreate {
	if oic.orders == nil {
		oic.orders = make(map[int]struct{})
	}
	oic.orders[id] = struct{}{}
	return oic
}

// SetNillableOrdersID sets the orders edge to Orders by id if the given value is not nil.
func (oic *OrderItemsCreate) SetNillableOrdersID(id *int) *OrderItemsCreate {
	if id != nil {
		oic = oic.SetOrdersID(*id)
	}
	return oic
}

// SetOrders sets the orders edge to Orders.
func (oic *OrderItemsCreate) SetOrders(o *Orders) *OrderItemsCreate {
	return oic.SetOrdersID(o.ID)
}

// Save creates the OrderItems in the database.
func (oic *OrderItemsCreate) Save(ctx context.Context) (*OrderItems, error) {
	if len(oic.orders) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"orders\"")
	}
	return oic.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (oic *OrderItemsCreate) SaveX(ctx context.Context) *OrderItems {
	v, err := oic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (oic *OrderItemsCreate) sqlSave(ctx context.Context) (*OrderItems, error) {
	var (
		oi    = &OrderItems{config: oic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderitems.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderitems.FieldID,
			},
		}
	)
	if nodes := oic.orders; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitems.OrdersTable,
			Columns: []string{orderitems.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, oic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	oi.ID = int(id)
	return oi, nil
}
