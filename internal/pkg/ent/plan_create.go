// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/billing/internal/pkg/ent/plan"
	"github.com/pepeunlimited/billing/internal/pkg/ent/subscription"
)

// PlanCreate is the builder for creating a Plan entity.
type PlanCreate struct {
	config
	title_i18n_id *int64
	price_id      *int64
	start_at      *time.Time
	end_at        *time.Time
	length        *uint8
	unit          *string
	subscriptions map[int]struct{}
}

// SetTitleI18nID sets the title_i18n_id field.
func (pc *PlanCreate) SetTitleI18nID(i int64) *PlanCreate {
	pc.title_i18n_id = &i
	return pc
}

// SetPriceID sets the price_id field.
func (pc *PlanCreate) SetPriceID(i int64) *PlanCreate {
	pc.price_id = &i
	return pc
}

// SetStartAt sets the start_at field.
func (pc *PlanCreate) SetStartAt(t time.Time) *PlanCreate {
	pc.start_at = &t
	return pc
}

// SetEndAt sets the end_at field.
func (pc *PlanCreate) SetEndAt(t time.Time) *PlanCreate {
	pc.end_at = &t
	return pc
}

// SetLength sets the length field.
func (pc *PlanCreate) SetLength(u uint8) *PlanCreate {
	pc.length = &u
	return pc
}

// SetUnit sets the unit field.
func (pc *PlanCreate) SetUnit(s string) *PlanCreate {
	pc.unit = &s
	return pc
}

// AddSubscriptionIDs adds the subscriptions edge to Subscription by ids.
func (pc *PlanCreate) AddSubscriptionIDs(ids ...int) *PlanCreate {
	if pc.subscriptions == nil {
		pc.subscriptions = make(map[int]struct{})
	}
	for i := range ids {
		pc.subscriptions[ids[i]] = struct{}{}
	}
	return pc
}

// AddSubscriptions adds the subscriptions edges to Subscription.
func (pc *PlanCreate) AddSubscriptions(s ...*Subscription) *PlanCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddSubscriptionIDs(ids...)
}

// Save creates the Plan in the database.
func (pc *PlanCreate) Save(ctx context.Context) (*Plan, error) {
	if pc.title_i18n_id == nil {
		return nil, errors.New("ent: missing required field \"title_i18n_id\"")
	}
	if pc.price_id == nil {
		return nil, errors.New("ent: missing required field \"price_id\"")
	}
	if pc.start_at == nil {
		return nil, errors.New("ent: missing required field \"start_at\"")
	}
	if pc.end_at == nil {
		return nil, errors.New("ent: missing required field \"end_at\"")
	}
	if pc.length == nil {
		return nil, errors.New("ent: missing required field \"length\"")
	}
	if pc.unit == nil {
		return nil, errors.New("ent: missing required field \"unit\"")
	}
	if err := plan.UnitValidator(*pc.unit); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"unit\": %v", err)
	}
	return pc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlanCreate) SaveX(ctx context.Context) *Plan {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PlanCreate) sqlSave(ctx context.Context) (*Plan, error) {
	var (
		pl    = &Plan{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: plan.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: plan.FieldID,
			},
		}
	)
	if value := pc.title_i18n_id; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: plan.FieldTitleI18nID,
		})
		pl.TitleI18nID = *value
	}
	if value := pc.price_id; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: plan.FieldPriceID,
		})
		pl.PriceID = *value
	}
	if value := pc.start_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: plan.FieldStartAt,
		})
		pl.StartAt = *value
	}
	if value := pc.end_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: plan.FieldEndAt,
		})
		pl.EndAt = *value
	}
	if value := pc.length; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  *value,
			Column: plan.FieldLength,
		})
		pl.Length = *value
	}
	if value := pc.unit; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: plan.FieldUnit,
		})
		pl.Unit = *value
	}
	if nodes := pc.subscriptions; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.SubscriptionsTable,
			Columns: []string{plan.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subscription.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pl.ID = int(id)
	return pl, nil
}
