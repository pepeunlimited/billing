// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/billing/internal/pkg/ent/plans"
	"github.com/pepeunlimited/billing/internal/pkg/ent/predicate"
	"github.com/pepeunlimited/billing/internal/pkg/ent/subscriptions"
)

// PlansUpdate is the builder for updating Plans entities.
type PlansUpdate struct {
	config
	subscriptions        map[int]struct{}
	clearedSubscriptions bool
	predicates           []predicate.Plans
}

// Where adds a new predicate for the builder.
func (pu *PlansUpdate) Where(ps ...predicate.Plans) *PlansUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetSubscriptionsID sets the subscriptions edge to Subscriptions by id.
func (pu *PlansUpdate) SetSubscriptionsID(id int) *PlansUpdate {
	if pu.subscriptions == nil {
		pu.subscriptions = make(map[int]struct{})
	}
	pu.subscriptions[id] = struct{}{}
	return pu
}

// SetNillableSubscriptionsID sets the subscriptions edge to Subscriptions by id if the given value is not nil.
func (pu *PlansUpdate) SetNillableSubscriptionsID(id *int) *PlansUpdate {
	if id != nil {
		pu = pu.SetSubscriptionsID(*id)
	}
	return pu
}

// SetSubscriptions sets the subscriptions edge to Subscriptions.
func (pu *PlansUpdate) SetSubscriptions(s *Subscriptions) *PlansUpdate {
	return pu.SetSubscriptionsID(s.ID)
}

// ClearSubscriptions clears the subscriptions edge to Subscriptions.
func (pu *PlansUpdate) ClearSubscriptions() *PlansUpdate {
	pu.clearedSubscriptions = true
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PlansUpdate) Save(ctx context.Context) (int, error) {
	if len(pu.subscriptions) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"subscriptions\"")
	}
	return pu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlansUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlansUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlansUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PlansUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plans.Table,
			Columns: plans.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: plans.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pu.clearedSubscriptions {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plans.SubscriptionsTable,
			Columns: []string{plans.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subscriptions.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.subscriptions; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plans.SubscriptionsTable,
			Columns: []string{plans.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subscriptions.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PlansUpdateOne is the builder for updating a single Plans entity.
type PlansUpdateOne struct {
	config
	id                   int
	subscriptions        map[int]struct{}
	clearedSubscriptions bool
}

// SetSubscriptionsID sets the subscriptions edge to Subscriptions by id.
func (puo *PlansUpdateOne) SetSubscriptionsID(id int) *PlansUpdateOne {
	if puo.subscriptions == nil {
		puo.subscriptions = make(map[int]struct{})
	}
	puo.subscriptions[id] = struct{}{}
	return puo
}

// SetNillableSubscriptionsID sets the subscriptions edge to Subscriptions by id if the given value is not nil.
func (puo *PlansUpdateOne) SetNillableSubscriptionsID(id *int) *PlansUpdateOne {
	if id != nil {
		puo = puo.SetSubscriptionsID(*id)
	}
	return puo
}

// SetSubscriptions sets the subscriptions edge to Subscriptions.
func (puo *PlansUpdateOne) SetSubscriptions(s *Subscriptions) *PlansUpdateOne {
	return puo.SetSubscriptionsID(s.ID)
}

// ClearSubscriptions clears the subscriptions edge to Subscriptions.
func (puo *PlansUpdateOne) ClearSubscriptions() *PlansUpdateOne {
	puo.clearedSubscriptions = true
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *PlansUpdateOne) Save(ctx context.Context) (*Plans, error) {
	if len(puo.subscriptions) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"subscriptions\"")
	}
	return puo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlansUpdateOne) SaveX(ctx context.Context) *Plans {
	pl, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pl
}

// Exec executes the query on the entity.
func (puo *PlansUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlansUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PlansUpdateOne) sqlSave(ctx context.Context) (pl *Plans, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plans.Table,
			Columns: plans.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  puo.id,
				Type:   field.TypeInt,
				Column: plans.FieldID,
			},
		},
	}
	if puo.clearedSubscriptions {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plans.SubscriptionsTable,
			Columns: []string{plans.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subscriptions.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.subscriptions; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plans.SubscriptionsTable,
			Columns: []string{plans.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subscriptions.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pl = &Plans{config: puo.config}
	_spec.Assign = pl.assignValues
	_spec.ScanValues = pl.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pl, nil
}
