// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"log"

	"github.com/facebookincubator/ent/dialect/sql"
)

// dsn for the database. In order to run the tests locally, run the following command:
//
//	 ENT_INTEGRATION_ENDPOINT="root:pass@tcp(localhost:3306)/test?parseTime=True" go test -v
//
var dsn string

func ExampleOrderItems() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the orderitems's edges.

	// create orderitems vertex with its edges.
	oi := client.OrderItems.
		Create().
		SaveX(ctx)
	log.Println("orderitems created:", oi)

	// query edges.

	// Output:
}
func ExampleOrderTXs() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the ordertxs's edges.

	// create ordertxs vertex with its edges.
	ordertxs := client.OrderTXs.
		Create().
		SaveX(ctx)
	log.Println("ordertxs created:", ordertxs)

	// query edges.

	// Output:
}
func ExampleOrders() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the orders's edges.
	ordertxs0 := client.OrderTXs.
		Create().
		SaveX(ctx)
	log.Println("ordertxs created:", ordertxs0)
	oi1 := client.OrderItems.
		Create().
		SaveX(ctx)
	log.Println("orderitems created:", oi1)
	pi2 := client.PaymentInstruments.
		Create().
		SaveX(ctx)
	log.Println("paymentinstruments created:", pi2)

	// create orders vertex with its edges.
	o := client.Orders.
		Create().
		AddOrderTxs(ordertxs0).
		AddOrderItems(oi1).
		AddPaymentInstruments(pi2).
		SaveX(ctx)
	log.Println("orders created:", o)

	// query edges.
	ordertxs0, err = o.QueryOrderTxs().First(ctx)
	if err != nil {
		log.Fatalf("failed querying order_txs: %v", err)
	}
	log.Println("order_txs found:", ordertxs0)

	oi1, err = o.QueryOrderItems().First(ctx)
	if err != nil {
		log.Fatalf("failed querying order_items: %v", err)
	}
	log.Println("order_items found:", oi1)

	pi2, err = o.QueryPaymentInstruments().First(ctx)
	if err != nil {
		log.Fatalf("failed querying payment_instruments: %v", err)
	}
	log.Println("payment_instruments found:", pi2)

	// Output:
}
func ExamplePaymentInstruments() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the paymentinstruments's edges.

	// create paymentinstruments vertex with its edges.
	pi := client.PaymentInstruments.
		Create().
		SaveX(ctx)
	log.Println("paymentinstruments created:", pi)

	// query edges.

	// Output:
}
func ExamplePlans() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the plans's edges.

	// create plans vertex with its edges.
	pl := client.Plans.
		Create().
		SaveX(ctx)
	log.Println("plans created:", pl)

	// query edges.

	// Output:
}
func ExampleSubscriptions() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the subscriptions's edges.
	pl0 := client.Plans.
		Create().
		SaveX(ctx)
	log.Println("plans created:", pl0)

	// create subscriptions vertex with its edges.
	s := client.Subscriptions.
		Create().
		AddPlans(pl0).
		SaveX(ctx)
	log.Println("subscriptions created:", s)

	// query edges.
	pl0, err = s.QueryPlans().First(ctx)
	if err != nil {
		log.Fatalf("failed querying plans: %v", err)
	}
	log.Println("plans found:", pl0)

	// Output:
}
