// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/billing/internal/pkg/ent/orders"
	"github.com/pepeunlimited/billing/internal/pkg/ent/ordertxs"
	"github.com/pepeunlimited/billing/internal/pkg/ent/predicate"
)

// OrderTXsQuery is the builder for querying OrderTXs entities.
type OrderTXsQuery struct {
	config
	limit      *int
	offset     *int
	order      []Order
	unique     []string
	predicates []predicate.OrderTXs
	// eager-loading edges.
	withOrders *OrdersQuery
	withFKs    bool
	// intermediate query.
	sql *sql.Selector
}

// Where adds a new predicate for the builder.
func (ordertxsquery *OrderTXsQuery) Where(ps ...predicate.OrderTXs) *OrderTXsQuery {
	ordertxsquery.predicates = append(ordertxsquery.predicates, ps...)
	return ordertxsquery
}

// Limit adds a limit step to the query.
func (ordertxsquery *OrderTXsQuery) Limit(limit int) *OrderTXsQuery {
	ordertxsquery.limit = &limit
	return ordertxsquery
}

// Offset adds an offset step to the query.
func (ordertxsquery *OrderTXsQuery) Offset(offset int) *OrderTXsQuery {
	ordertxsquery.offset = &offset
	return ordertxsquery
}

// Order adds an order step to the query.
func (ordertxsquery *OrderTXsQuery) Order(o ...Order) *OrderTXsQuery {
	ordertxsquery.order = append(ordertxsquery.order, o...)
	return ordertxsquery
}

// QueryOrders chains the current query on the orders edge.
func (ordertxsquery *OrderTXsQuery) QueryOrders() *OrdersQuery {
	query := &OrdersQuery{config: ordertxsquery.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(ordertxs.Table, ordertxs.FieldID, ordertxsquery.sqlQuery()),
		sqlgraph.To(orders.Table, orders.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ordertxs.OrdersTable, ordertxs.OrdersColumn),
	)
	query.sql = sqlgraph.SetNeighbors(ordertxsquery.driver.Dialect(), step)
	return query
}

// First returns the first OrderTXs entity in the query. Returns *NotFoundError when no ordertxs was found.
func (ordertxsquery *OrderTXsQuery) First(ctx context.Context) (*OrderTXs, error) {
	ordertxsSlice, err := ordertxsquery.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(ordertxsSlice) == 0 {
		return nil, &NotFoundError{ordertxs.Label}
	}
	return ordertxsSlice[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ordertxsquery *OrderTXsQuery) FirstX(ctx context.Context) *OrderTXs {
	ordertxs, err := ordertxsquery.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return ordertxs
}

// FirstID returns the first OrderTXs id in the query. Returns *NotFoundError when no id was found.
func (ordertxsquery *OrderTXsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ordertxsquery.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{ordertxs.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (ordertxsquery *OrderTXsQuery) FirstXID(ctx context.Context) int {
	id, err := ordertxsquery.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only OrderTXs entity in the query, returns an error if not exactly one entity was returned.
func (ordertxsquery *OrderTXsQuery) Only(ctx context.Context) (*OrderTXs, error) {
	ordertxsSlice, err := ordertxsquery.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(ordertxsSlice) {
	case 1:
		return ordertxsSlice[0], nil
	case 0:
		return nil, &NotFoundError{ordertxs.Label}
	default:
		return nil, &NotSingularError{ordertxs.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ordertxsquery *OrderTXsQuery) OnlyX(ctx context.Context) *OrderTXs {
	ordertxs, err := ordertxsquery.Only(ctx)
	if err != nil {
		panic(err)
	}
	return ordertxs
}

// OnlyID returns the only OrderTXs id in the query, returns an error if not exactly one id was returned.
func (ordertxsquery *OrderTXsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ordertxsquery.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{ordertxs.Label}
	default:
		err = &NotSingularError{ordertxs.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (ordertxsquery *OrderTXsQuery) OnlyXID(ctx context.Context) int {
	id, err := ordertxsquery.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrderTXsSlice.
func (ordertxsquery *OrderTXsQuery) All(ctx context.Context) ([]*OrderTXs, error) {
	return ordertxsquery.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ordertxsquery *OrderTXsQuery) AllX(ctx context.Context) []*OrderTXs {
	ordertxsSlice, err := ordertxsquery.All(ctx)
	if err != nil {
		panic(err)
	}
	return ordertxsSlice
}

// IDs executes the query and returns a list of OrderTXs ids.
func (ordertxsquery *OrderTXsQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := ordertxsquery.Select(ordertxs.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ordertxsquery *OrderTXsQuery) IDsX(ctx context.Context) []int {
	ids, err := ordertxsquery.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ordertxsquery *OrderTXsQuery) Count(ctx context.Context) (int, error) {
	return ordertxsquery.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ordertxsquery *OrderTXsQuery) CountX(ctx context.Context) int {
	count, err := ordertxsquery.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ordertxsquery *OrderTXsQuery) Exist(ctx context.Context) (bool, error) {
	return ordertxsquery.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ordertxsquery *OrderTXsQuery) ExistX(ctx context.Context) bool {
	exist, err := ordertxsquery.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ordertxsquery *OrderTXsQuery) Clone() *OrderTXsQuery {
	return &OrderTXsQuery{
		config:     ordertxsquery.config,
		limit:      ordertxsquery.limit,
		offset:     ordertxsquery.offset,
		order:      append([]Order{}, ordertxsquery.order...),
		unique:     append([]string{}, ordertxsquery.unique...),
		predicates: append([]predicate.OrderTXs{}, ordertxsquery.predicates...),
		// clone intermediate query.
		sql: ordertxsquery.sql.Clone(),
	}
}

//  WithOrders tells the query-builder to eager-loads the nodes that are connected to
// the "orders" edge. The optional arguments used to configure the query builder of the edge.
func (ordertxsquery *OrderTXsQuery) WithOrders(opts ...func(*OrdersQuery)) *OrderTXsQuery {
	query := &OrdersQuery{config: ordertxsquery.config}
	for _, opt := range opts {
		opt(query)
	}
	ordertxsquery.withOrders = query
	return ordertxsquery
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (ordertxsquery *OrderTXsQuery) GroupBy(field string, fields ...string) *OrderTXsGroupBy {
	group := &OrderTXsGroupBy{config: ordertxsquery.config}
	group.fields = append([]string{field}, fields...)
	group.sql = ordertxsquery.sqlQuery()
	return group
}

// Select one or more fields from the given query.
func (ordertxsquery *OrderTXsQuery) Select(field string, fields ...string) *OrderTXsSelect {
	selector := &OrderTXsSelect{config: ordertxsquery.config}
	selector.fields = append([]string{field}, fields...)
	selector.sql = ordertxsquery.sqlQuery()
	return selector
}

func (ordertxsquery *OrderTXsQuery) sqlAll(ctx context.Context) ([]*OrderTXs, error) {
	var (
		nodes       = []*OrderTXs{}
		withFKs     = ordertxsquery.withFKs
		_spec       = ordertxsquery.querySpec()
		loadedTypes = [1]bool{
			ordertxsquery.withOrders != nil,
		}
	)
	if ordertxsquery.withOrders != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, ordertxs.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &OrderTXs{config: ordertxsquery.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, ordertxsquery.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ordertxsquery.withOrders; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*OrderTXs)
		for i := range nodes {
			if fk := nodes[i].orders_order_txs; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(orders.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "orders_order_txs" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Orders = n
			}
		}
	}

	return nodes, nil
}

func (ordertxsquery *OrderTXsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ordertxsquery.querySpec()
	return sqlgraph.CountNodes(ctx, ordertxsquery.driver, _spec)
}

func (ordertxsquery *OrderTXsQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ordertxsquery.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (ordertxsquery *OrderTXsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ordertxs.Table,
			Columns: ordertxs.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ordertxs.FieldID,
			},
		},
		From:   ordertxsquery.sql,
		Unique: true,
	}
	if ps := ordertxsquery.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ordertxsquery.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ordertxsquery.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ordertxsquery.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ordertxsquery *OrderTXsQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(ordertxsquery.driver.Dialect())
	t1 := builder.Table(ordertxs.Table)
	selector := builder.Select(t1.Columns(ordertxs.Columns...)...).From(t1)
	if ordertxsquery.sql != nil {
		selector = ordertxsquery.sql
		selector.Select(selector.Columns(ordertxs.Columns...)...)
	}
	for _, p := range ordertxsquery.predicates {
		p(selector)
	}
	for _, p := range ordertxsquery.order {
		p(selector)
	}
	if offset := ordertxsquery.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ordertxsquery.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OrderTXsGroupBy is the builder for group-by OrderTXs entities.
type OrderTXsGroupBy struct {
	config
	fields []string
	fns    []Aggregate
	// intermediate query.
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ordertxsgroupby *OrderTXsGroupBy) Aggregate(fns ...Aggregate) *OrderTXsGroupBy {
	ordertxsgroupby.fns = append(ordertxsgroupby.fns, fns...)
	return ordertxsgroupby
}

// Scan applies the group-by query and scan the result into the given value.
func (ordertxsgroupby *OrderTXsGroupBy) Scan(ctx context.Context, v interface{}) error {
	return ordertxsgroupby.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ordertxsgroupby *OrderTXsGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ordertxsgroupby.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (ordertxsgroupby *OrderTXsGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ordertxsgroupby.fields) > 1 {
		return nil, errors.New("ent: OrderTXsGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ordertxsgroupby.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ordertxsgroupby *OrderTXsGroupBy) StringsX(ctx context.Context) []string {
	v, err := ordertxsgroupby.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (ordertxsgroupby *OrderTXsGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ordertxsgroupby.fields) > 1 {
		return nil, errors.New("ent: OrderTXsGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ordertxsgroupby.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ordertxsgroupby *OrderTXsGroupBy) IntsX(ctx context.Context) []int {
	v, err := ordertxsgroupby.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (ordertxsgroupby *OrderTXsGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ordertxsgroupby.fields) > 1 {
		return nil, errors.New("ent: OrderTXsGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ordertxsgroupby.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ordertxsgroupby *OrderTXsGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ordertxsgroupby.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (ordertxsgroupby *OrderTXsGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ordertxsgroupby.fields) > 1 {
		return nil, errors.New("ent: OrderTXsGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ordertxsgroupby.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ordertxsgroupby *OrderTXsGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ordertxsgroupby.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ordertxsgroupby *OrderTXsGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ordertxsgroupby.sqlQuery().Query()
	if err := ordertxsgroupby.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ordertxsgroupby *OrderTXsGroupBy) sqlQuery() *sql.Selector {
	selector := ordertxsgroupby.sql
	columns := make([]string, 0, len(ordertxsgroupby.fields)+len(ordertxsgroupby.fns))
	columns = append(columns, ordertxsgroupby.fields...)
	for _, fn := range ordertxsgroupby.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(ordertxsgroupby.fields...)
}

// OrderTXsSelect is the builder for select fields of OrderTXs entities.
type OrderTXsSelect struct {
	config
	fields []string
	// intermediate queries.
	sql *sql.Selector
}

// Scan applies the selector query and scan the result into the given value.
func (ordertxsselect *OrderTXsSelect) Scan(ctx context.Context, v interface{}) error {
	return ordertxsselect.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ordertxsselect *OrderTXsSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ordertxsselect.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (ordertxsselect *OrderTXsSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ordertxsselect.fields) > 1 {
		return nil, errors.New("ent: OrderTXsSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ordertxsselect.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ordertxsselect *OrderTXsSelect) StringsX(ctx context.Context) []string {
	v, err := ordertxsselect.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (ordertxsselect *OrderTXsSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ordertxsselect.fields) > 1 {
		return nil, errors.New("ent: OrderTXsSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ordertxsselect.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ordertxsselect *OrderTXsSelect) IntsX(ctx context.Context) []int {
	v, err := ordertxsselect.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (ordertxsselect *OrderTXsSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ordertxsselect.fields) > 1 {
		return nil, errors.New("ent: OrderTXsSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ordertxsselect.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ordertxsselect *OrderTXsSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ordertxsselect.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (ordertxsselect *OrderTXsSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ordertxsselect.fields) > 1 {
		return nil, errors.New("ent: OrderTXsSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ordertxsselect.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ordertxsselect *OrderTXsSelect) BoolsX(ctx context.Context) []bool {
	v, err := ordertxsselect.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ordertxsselect *OrderTXsSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ordertxsselect.sqlQuery().Query()
	if err := ordertxsselect.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ordertxsselect *OrderTXsSelect) sqlQuery() sql.Querier {
	selector := ordertxsselect.sql
	selector.Select(selector.Columns(ordertxsselect.fields...)...)
	return selector
}
