// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pepeunlimited/billing/internal/pkg/ent/orders"
	"github.com/pepeunlimited/billing/internal/pkg/ent/paymentinstruments"
)

// PaymentInstruments is the model entity for the PaymentInstruments schema.
type PaymentInstruments struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentInstrumentsQuery when eager-loading is set.
	Edges                      PaymentInstrumentsEdges `json:"edges"`
	orders_payment_instruments *int
}

// PaymentInstrumentsEdges holds the relations/edges for other nodes in the graph.
type PaymentInstrumentsEdges struct {
	// Orders holds the value of the orders edge.
	Orders *Orders
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentInstrumentsEdges) OrdersOrErr() (*Orders, error) {
	if e.loadedTypes[0] {
		if e.Orders == nil {
			// The edge orders was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: orders.Label}
		}
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentInstruments) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*PaymentInstruments) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // orders_payment_instruments
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentInstruments fields.
func (pi *PaymentInstruments) assignValues(values ...interface{}) error {
	if m, n := len(values), len(paymentinstruments.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pi.ID = int(value.Int64)
	values = values[1:]
	values = values[0:]
	if len(values) == len(paymentinstruments.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field orders_payment_instruments", value)
		} else if value.Valid {
			pi.orders_payment_instruments = new(int)
			*pi.orders_payment_instruments = int(value.Int64)
		}
	}
	return nil
}

// QueryOrders queries the orders edge of the PaymentInstruments.
func (pi *PaymentInstruments) QueryOrders() *OrdersQuery {
	return (&PaymentInstrumentsClient{pi.config}).QueryOrders(pi)
}

// Update returns a builder for updating this PaymentInstruments.
// Note that, you need to call PaymentInstruments.Unwrap() before calling this method, if this PaymentInstruments
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *PaymentInstruments) Update() *PaymentInstrumentsUpdateOne {
	return (&PaymentInstrumentsClient{pi.config}).UpdateOne(pi)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pi *PaymentInstruments) Unwrap() *PaymentInstruments {
	tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentInstruments is not a transactional entity")
	}
	pi.config.driver = tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *PaymentInstruments) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentInstruments(")
	builder.WriteString(fmt.Sprintf("id=%v", pi.ID))
	builder.WriteByte(')')
	return builder.String()
}

// PaymentInstrumentsSlice is a parsable slice of PaymentInstruments.
type PaymentInstrumentsSlice []*PaymentInstruments

func (pi PaymentInstrumentsSlice) config(cfg config) {
	for _i := range pi {
		pi[_i].config = cfg
	}
}
