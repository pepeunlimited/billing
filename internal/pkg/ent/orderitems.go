// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pepeunlimited/billing/internal/pkg/ent/orderitems"
	"github.com/pepeunlimited/billing/internal/pkg/ent/orders"
)

// OrderItems is the model entity for the OrderItems schema.
type OrderItems struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderItemsQuery when eager-loading is set.
	Edges              OrderItemsEdges `json:"edges"`
	orders_order_items *int
}

// OrderItemsEdges holds the relations/edges for other nodes in the graph.
type OrderItemsEdges struct {
	// Orders holds the value of the orders edge.
	Orders *Orders
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderItemsEdges) OrdersOrErr() (*Orders, error) {
	if e.loadedTypes[0] {
		if e.Orders == nil {
			// The edge orders was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: orders.Label}
		}
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderItems) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*OrderItems) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // orders_order_items
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderItems fields.
func (oi *OrderItems) assignValues(values ...interface{}) error {
	if m, n := len(values), len(orderitems.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	oi.ID = int(value.Int64)
	values = values[1:]
	values = values[0:]
	if len(values) == len(orderitems.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field orders_order_items", value)
		} else if value.Valid {
			oi.orders_order_items = new(int)
			*oi.orders_order_items = int(value.Int64)
		}
	}
	return nil
}

// QueryOrders queries the orders edge of the OrderItems.
func (oi *OrderItems) QueryOrders() *OrdersQuery {
	return (&OrderItemsClient{oi.config}).QueryOrders(oi)
}

// Update returns a builder for updating this OrderItems.
// Note that, you need to call OrderItems.Unwrap() before calling this method, if this OrderItems
// was returned from a transaction, and the transaction was committed or rolled back.
func (oi *OrderItems) Update() *OrderItemsUpdateOne {
	return (&OrderItemsClient{oi.config}).UpdateOne(oi)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (oi *OrderItems) Unwrap() *OrderItems {
	tx, ok := oi.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderItems is not a transactional entity")
	}
	oi.config.driver = tx.drv
	return oi
}

// String implements the fmt.Stringer.
func (oi *OrderItems) String() string {
	var builder strings.Builder
	builder.WriteString("OrderItems(")
	builder.WriteString(fmt.Sprintf("id=%v", oi.ID))
	builder.WriteByte(')')
	return builder.String()
}

// OrderItemsSlice is a parsable slice of OrderItems.
type OrderItemsSlice []*OrderItems

func (oi OrderItemsSlice) config(cfg config) {
	for _i := range oi {
		oi[_i].config = cfg
	}
}
