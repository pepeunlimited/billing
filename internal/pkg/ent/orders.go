// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pepeunlimited/billing/internal/pkg/ent/orders"
)

// Orders is the model entity for the Orders schema.
type Orders struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrdersQuery when eager-loading is set.
	Edges OrdersEdges `json:"edges"`
}

// OrdersEdges holds the relations/edges for other nodes in the graph.
type OrdersEdges struct {
	// OrderTxs holds the value of the order_txs edge.
	OrderTxs []*OrderTXs
	// OrderItems holds the value of the order_items edge.
	OrderItems []*OrderItems
	// PaymentInstruments holds the value of the payment_instruments edge.
	PaymentInstruments []*PaymentInstruments
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OrderTxsOrErr returns the OrderTxs value or an error if the edge
// was not loaded in eager-loading.
func (e OrdersEdges) OrderTxsOrErr() ([]*OrderTXs, error) {
	if e.loadedTypes[0] {
		return e.OrderTxs, nil
	}
	return nil, &NotLoadedError{edge: "order_txs"}
}

// OrderItemsOrErr returns the OrderItems value or an error if the edge
// was not loaded in eager-loading.
func (e OrdersEdges) OrderItemsOrErr() ([]*OrderItems, error) {
	if e.loadedTypes[1] {
		return e.OrderItems, nil
	}
	return nil, &NotLoadedError{edge: "order_items"}
}

// PaymentInstrumentsOrErr returns the PaymentInstruments value or an error if the edge
// was not loaded in eager-loading.
func (e OrdersEdges) PaymentInstrumentsOrErr() ([]*PaymentInstruments, error) {
	if e.loadedTypes[2] {
		return e.PaymentInstruments, nil
	}
	return nil, &NotLoadedError{edge: "payment_instruments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Orders) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Orders fields.
func (o *Orders) assignValues(values ...interface{}) error {
	if m, n := len(values), len(orders.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	o.ID = int(value.Int64)
	values = values[1:]
	return nil
}

// QueryOrderTxs queries the order_txs edge of the Orders.
func (o *Orders) QueryOrderTxs() *OrderTXsQuery {
	return (&OrdersClient{o.config}).QueryOrderTxs(o)
}

// QueryOrderItems queries the order_items edge of the Orders.
func (o *Orders) QueryOrderItems() *OrderItemsQuery {
	return (&OrdersClient{o.config}).QueryOrderItems(o)
}

// QueryPaymentInstruments queries the payment_instruments edge of the Orders.
func (o *Orders) QueryPaymentInstruments() *PaymentInstrumentsQuery {
	return (&OrdersClient{o.config}).QueryPaymentInstruments(o)
}

// Update returns a builder for updating this Orders.
// Note that, you need to call Orders.Unwrap() before calling this method, if this Orders
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Orders) Update() *OrdersUpdateOne {
	return (&OrdersClient{o.config}).UpdateOne(o)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (o *Orders) Unwrap() *Orders {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Orders is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Orders) String() string {
	var builder strings.Builder
	builder.WriteString("Orders(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteByte(')')
	return builder.String()
}

// OrdersSlice is a parsable slice of Orders.
type OrdersSlice []*Orders

func (o OrdersSlice) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
