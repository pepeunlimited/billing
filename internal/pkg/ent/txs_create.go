// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/billing/internal/pkg/ent/orders"
	"github.com/pepeunlimited/billing/internal/pkg/ent/txs"
)

// TxsCreate is the builder for creating a Txs entity.
type TxsCreate struct {
	config
	status     *string
	created_at *time.Time
	orders     map[int]struct{}
}

// SetStatus sets the status field.
func (tc *TxsCreate) SetStatus(s string) *TxsCreate {
	tc.status = &s
	return tc
}

// SetCreatedAt sets the created_at field.
func (tc *TxsCreate) SetCreatedAt(t time.Time) *TxsCreate {
	tc.created_at = &t
	return tc
}

// SetOrdersID sets the orders edge to Orders by id.
func (tc *TxsCreate) SetOrdersID(id int) *TxsCreate {
	if tc.orders == nil {
		tc.orders = make(map[int]struct{})
	}
	tc.orders[id] = struct{}{}
	return tc
}

// SetNillableOrdersID sets the orders edge to Orders by id if the given value is not nil.
func (tc *TxsCreate) SetNillableOrdersID(id *int) *TxsCreate {
	if id != nil {
		tc = tc.SetOrdersID(*id)
	}
	return tc
}

// SetOrders sets the orders edge to Orders.
func (tc *TxsCreate) SetOrders(o *Orders) *TxsCreate {
	return tc.SetOrdersID(o.ID)
}

// Save creates the Txs in the database.
func (tc *TxsCreate) Save(ctx context.Context) (*Txs, error) {
	if tc.status == nil {
		return nil, errors.New("ent: missing required field \"status\"")
	}
	if err := txs.StatusValidator(*tc.status); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"status\": %v", err)
	}
	if tc.created_at == nil {
		return nil, errors.New("ent: missing required field \"created_at\"")
	}
	if len(tc.orders) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"orders\"")
	}
	return tc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TxsCreate) SaveX(ctx context.Context) *Txs {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tc *TxsCreate) sqlSave(ctx context.Context) (*Txs, error) {
	var (
		t     = &Txs{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: txs.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: txs.FieldID,
			},
		}
	)
	if value := tc.status; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: txs.FieldStatus,
		})
		t.Status = *value
	}
	if value := tc.created_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: txs.FieldCreatedAt,
		})
		t.CreatedAt = *value
	}
	if nodes := tc.orders; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   txs.OrdersTable,
			Columns: []string{txs.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	t.ID = int(id)
	return t, nil
}
