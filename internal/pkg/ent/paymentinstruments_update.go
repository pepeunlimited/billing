// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/billing/internal/pkg/ent/orders"
	"github.com/pepeunlimited/billing/internal/pkg/ent/paymentinstruments"
	"github.com/pepeunlimited/billing/internal/pkg/ent/predicate"
)

// PaymentInstrumentsUpdate is the builder for updating PaymentInstruments entities.
type PaymentInstrumentsUpdate struct {
	config
	orders        map[int]struct{}
	clearedOrders bool
	predicates    []predicate.PaymentInstruments
}

// Where adds a new predicate for the builder.
func (piu *PaymentInstrumentsUpdate) Where(ps ...predicate.PaymentInstruments) *PaymentInstrumentsUpdate {
	piu.predicates = append(piu.predicates, ps...)
	return piu
}

// SetOrdersID sets the orders edge to Orders by id.
func (piu *PaymentInstrumentsUpdate) SetOrdersID(id int) *PaymentInstrumentsUpdate {
	if piu.orders == nil {
		piu.orders = make(map[int]struct{})
	}
	piu.orders[id] = struct{}{}
	return piu
}

// SetNillableOrdersID sets the orders edge to Orders by id if the given value is not nil.
func (piu *PaymentInstrumentsUpdate) SetNillableOrdersID(id *int) *PaymentInstrumentsUpdate {
	if id != nil {
		piu = piu.SetOrdersID(*id)
	}
	return piu
}

// SetOrders sets the orders edge to Orders.
func (piu *PaymentInstrumentsUpdate) SetOrders(o *Orders) *PaymentInstrumentsUpdate {
	return piu.SetOrdersID(o.ID)
}

// ClearOrders clears the orders edge to Orders.
func (piu *PaymentInstrumentsUpdate) ClearOrders() *PaymentInstrumentsUpdate {
	piu.clearedOrders = true
	return piu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (piu *PaymentInstrumentsUpdate) Save(ctx context.Context) (int, error) {
	if len(piu.orders) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"orders\"")
	}
	return piu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *PaymentInstrumentsUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *PaymentInstrumentsUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *PaymentInstrumentsUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piu *PaymentInstrumentsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   paymentinstruments.Table,
			Columns: paymentinstruments.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: paymentinstruments.FieldID,
			},
		},
	}
	if ps := piu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if piu.clearedOrders {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentinstruments.OrdersTable,
			Columns: []string{paymentinstruments.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.orders; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentinstruments.OrdersTable,
			Columns: []string{paymentinstruments.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PaymentInstrumentsUpdateOne is the builder for updating a single PaymentInstruments entity.
type PaymentInstrumentsUpdateOne struct {
	config
	id            int
	orders        map[int]struct{}
	clearedOrders bool
}

// SetOrdersID sets the orders edge to Orders by id.
func (piuo *PaymentInstrumentsUpdateOne) SetOrdersID(id int) *PaymentInstrumentsUpdateOne {
	if piuo.orders == nil {
		piuo.orders = make(map[int]struct{})
	}
	piuo.orders[id] = struct{}{}
	return piuo
}

// SetNillableOrdersID sets the orders edge to Orders by id if the given value is not nil.
func (piuo *PaymentInstrumentsUpdateOne) SetNillableOrdersID(id *int) *PaymentInstrumentsUpdateOne {
	if id != nil {
		piuo = piuo.SetOrdersID(*id)
	}
	return piuo
}

// SetOrders sets the orders edge to Orders.
func (piuo *PaymentInstrumentsUpdateOne) SetOrders(o *Orders) *PaymentInstrumentsUpdateOne {
	return piuo.SetOrdersID(o.ID)
}

// ClearOrders clears the orders edge to Orders.
func (piuo *PaymentInstrumentsUpdateOne) ClearOrders() *PaymentInstrumentsUpdateOne {
	piuo.clearedOrders = true
	return piuo
}

// Save executes the query and returns the updated entity.
func (piuo *PaymentInstrumentsUpdateOne) Save(ctx context.Context) (*PaymentInstruments, error) {
	if len(piuo.orders) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"orders\"")
	}
	return piuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *PaymentInstrumentsUpdateOne) SaveX(ctx context.Context) *PaymentInstruments {
	pi, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pi
}

// Exec executes the query on the entity.
func (piuo *PaymentInstrumentsUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *PaymentInstrumentsUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piuo *PaymentInstrumentsUpdateOne) sqlSave(ctx context.Context) (pi *PaymentInstruments, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   paymentinstruments.Table,
			Columns: paymentinstruments.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  piuo.id,
				Type:   field.TypeInt,
				Column: paymentinstruments.FieldID,
			},
		},
	}
	if piuo.clearedOrders {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentinstruments.OrdersTable,
			Columns: []string{paymentinstruments.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.orders; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentinstruments.OrdersTable,
			Columns: []string{paymentinstruments.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pi = &PaymentInstruments{config: piuo.config}
	_spec.Assign = pi.assignValues
	_spec.ScanValues = pi.scanValues()
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pi, nil
}
