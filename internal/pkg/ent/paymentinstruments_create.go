// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/billing/internal/pkg/ent/orders"
	"github.com/pepeunlimited/billing/internal/pkg/ent/paymentinstruments"
)

// PaymentInstrumentsCreate is the builder for creating a PaymentInstruments entity.
type PaymentInstrumentsCreate struct {
	config
	orders map[int]struct{}
}

// SetOrdersID sets the orders edge to Orders by id.
func (pic *PaymentInstrumentsCreate) SetOrdersID(id int) *PaymentInstrumentsCreate {
	if pic.orders == nil {
		pic.orders = make(map[int]struct{})
	}
	pic.orders[id] = struct{}{}
	return pic
}

// SetNillableOrdersID sets the orders edge to Orders by id if the given value is not nil.
func (pic *PaymentInstrumentsCreate) SetNillableOrdersID(id *int) *PaymentInstrumentsCreate {
	if id != nil {
		pic = pic.SetOrdersID(*id)
	}
	return pic
}

// SetOrders sets the orders edge to Orders.
func (pic *PaymentInstrumentsCreate) SetOrders(o *Orders) *PaymentInstrumentsCreate {
	return pic.SetOrdersID(o.ID)
}

// Save creates the PaymentInstruments in the database.
func (pic *PaymentInstrumentsCreate) Save(ctx context.Context) (*PaymentInstruments, error) {
	if len(pic.orders) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"orders\"")
	}
	return pic.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (pic *PaymentInstrumentsCreate) SaveX(ctx context.Context) *PaymentInstruments {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pic *PaymentInstrumentsCreate) sqlSave(ctx context.Context) (*PaymentInstruments, error) {
	var (
		pi    = &PaymentInstruments{config: pic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: paymentinstruments.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: paymentinstruments.FieldID,
			},
		}
	)
	if nodes := pic.orders; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentinstruments.OrdersTable,
			Columns: []string{paymentinstruments.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pi.ID = int(id)
	return pi, nil
}
