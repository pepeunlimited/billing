// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pepeunlimited/billing/internal/pkg/ent/plans"
	"github.com/pepeunlimited/billing/internal/pkg/ent/subscriptions"
)

// Plans is the model entity for the Plans schema.
type Plans struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlansQuery when eager-loading is set.
	Edges               PlansEdges `json:"edges"`
	subscriptions_plans *int
}

// PlansEdges holds the relations/edges for other nodes in the graph.
type PlansEdges struct {
	// Subscriptions holds the value of the subscriptions edge.
	Subscriptions *Subscriptions
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SubscriptionsOrErr returns the Subscriptions value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlansEdges) SubscriptionsOrErr() (*Subscriptions, error) {
	if e.loadedTypes[0] {
		if e.Subscriptions == nil {
			// The edge subscriptions was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: subscriptions.Label}
		}
		return e.Subscriptions, nil
	}
	return nil, &NotLoadedError{edge: "subscriptions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Plans) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Plans) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // subscriptions_plans
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Plans fields.
func (pl *Plans) assignValues(values ...interface{}) error {
	if m, n := len(values), len(plans.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pl.ID = int(value.Int64)
	values = values[1:]
	values = values[0:]
	if len(values) == len(plans.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field subscriptions_plans", value)
		} else if value.Valid {
			pl.subscriptions_plans = new(int)
			*pl.subscriptions_plans = int(value.Int64)
		}
	}
	return nil
}

// QuerySubscriptions queries the subscriptions edge of the Plans.
func (pl *Plans) QuerySubscriptions() *SubscriptionsQuery {
	return (&PlansClient{pl.config}).QuerySubscriptions(pl)
}

// Update returns a builder for updating this Plans.
// Note that, you need to call Plans.Unwrap() before calling this method, if this Plans
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Plans) Update() *PlansUpdateOne {
	return (&PlansClient{pl.config}).UpdateOne(pl)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pl *Plans) Unwrap() *Plans {
	tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Plans is not a transactional entity")
	}
	pl.config.driver = tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Plans) String() string {
	var builder strings.Builder
	builder.WriteString("Plans(")
	builder.WriteString(fmt.Sprintf("id=%v", pl.ID))
	builder.WriteByte(')')
	return builder.String()
}

// PlansSlice is a parsable slice of Plans.
type PlansSlice []*Plans

func (pl PlansSlice) config(cfg config) {
	for _i := range pl {
		pl[_i].config = cfg
	}
}
