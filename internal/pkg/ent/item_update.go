// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/billing/internal/pkg/ent/item"
	"github.com/pepeunlimited/billing/internal/pkg/ent/orders"
	"github.com/pepeunlimited/billing/internal/pkg/ent/predicate"
)

// ItemUpdate is the builder for updating Item entities.
type ItemUpdate struct {
	config
	price_id      *int64
	addprice_id   *int64
	quantity      *uint8
	addquantity   *uint8
	orders        map[int]struct{}
	clearedOrders bool
	predicates    []predicate.Item
}

// Where adds a new predicate for the builder.
func (iu *ItemUpdate) Where(ps ...predicate.Item) *ItemUpdate {
	iu.predicates = append(iu.predicates, ps...)
	return iu
}

// SetPriceID sets the price_id field.
func (iu *ItemUpdate) SetPriceID(i int64) *ItemUpdate {
	iu.price_id = &i
	iu.addprice_id = nil
	return iu
}

// AddPriceID adds i to price_id.
func (iu *ItemUpdate) AddPriceID(i int64) *ItemUpdate {
	if iu.addprice_id == nil {
		iu.addprice_id = &i
	} else {
		*iu.addprice_id += i
	}
	return iu
}

// SetQuantity sets the quantity field.
func (iu *ItemUpdate) SetQuantity(u uint8) *ItemUpdate {
	iu.quantity = &u
	iu.addquantity = nil
	return iu
}

// SetNillableQuantity sets the quantity field if the given value is not nil.
func (iu *ItemUpdate) SetNillableQuantity(u *uint8) *ItemUpdate {
	if u != nil {
		iu.SetQuantity(*u)
	}
	return iu
}

// AddQuantity adds u to quantity.
func (iu *ItemUpdate) AddQuantity(u uint8) *ItemUpdate {
	if iu.addquantity == nil {
		iu.addquantity = &u
	} else {
		*iu.addquantity += u
	}
	return iu
}

// SetOrdersID sets the orders edge to Orders by id.
func (iu *ItemUpdate) SetOrdersID(id int) *ItemUpdate {
	if iu.orders == nil {
		iu.orders = make(map[int]struct{})
	}
	iu.orders[id] = struct{}{}
	return iu
}

// SetNillableOrdersID sets the orders edge to Orders by id if the given value is not nil.
func (iu *ItemUpdate) SetNillableOrdersID(id *int) *ItemUpdate {
	if id != nil {
		iu = iu.SetOrdersID(*id)
	}
	return iu
}

// SetOrders sets the orders edge to Orders.
func (iu *ItemUpdate) SetOrders(o *Orders) *ItemUpdate {
	return iu.SetOrdersID(o.ID)
}

// ClearOrders clears the orders edge to Orders.
func (iu *ItemUpdate) ClearOrders() *ItemUpdate {
	iu.clearedOrders = true
	return iu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (iu *ItemUpdate) Save(ctx context.Context) (int, error) {
	if len(iu.orders) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"orders\"")
	}
	return iu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ItemUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ItemUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ItemUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *ItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   item.Table,
			Columns: item.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: item.FieldID,
			},
		},
	}
	if ps := iu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := iu.price_id; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: item.FieldPriceID,
		})
	}
	if value := iu.addprice_id; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: item.FieldPriceID,
		})
	}
	if value := iu.quantity; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  *value,
			Column: item.FieldQuantity,
		})
	}
	if value := iu.addquantity; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  *value,
			Column: item.FieldQuantity,
		})
	}
	if iu.clearedOrders {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   item.OrdersTable,
			Columns: []string{item.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.orders; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   item.OrdersTable,
			Columns: []string{item.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ItemUpdateOne is the builder for updating a single Item entity.
type ItemUpdateOne struct {
	config
	id            int
	price_id      *int64
	addprice_id   *int64
	quantity      *uint8
	addquantity   *uint8
	orders        map[int]struct{}
	clearedOrders bool
}

// SetPriceID sets the price_id field.
func (iuo *ItemUpdateOne) SetPriceID(i int64) *ItemUpdateOne {
	iuo.price_id = &i
	iuo.addprice_id = nil
	return iuo
}

// AddPriceID adds i to price_id.
func (iuo *ItemUpdateOne) AddPriceID(i int64) *ItemUpdateOne {
	if iuo.addprice_id == nil {
		iuo.addprice_id = &i
	} else {
		*iuo.addprice_id += i
	}
	return iuo
}

// SetQuantity sets the quantity field.
func (iuo *ItemUpdateOne) SetQuantity(u uint8) *ItemUpdateOne {
	iuo.quantity = &u
	iuo.addquantity = nil
	return iuo
}

// SetNillableQuantity sets the quantity field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableQuantity(u *uint8) *ItemUpdateOne {
	if u != nil {
		iuo.SetQuantity(*u)
	}
	return iuo
}

// AddQuantity adds u to quantity.
func (iuo *ItemUpdateOne) AddQuantity(u uint8) *ItemUpdateOne {
	if iuo.addquantity == nil {
		iuo.addquantity = &u
	} else {
		*iuo.addquantity += u
	}
	return iuo
}

// SetOrdersID sets the orders edge to Orders by id.
func (iuo *ItemUpdateOne) SetOrdersID(id int) *ItemUpdateOne {
	if iuo.orders == nil {
		iuo.orders = make(map[int]struct{})
	}
	iuo.orders[id] = struct{}{}
	return iuo
}

// SetNillableOrdersID sets the orders edge to Orders by id if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableOrdersID(id *int) *ItemUpdateOne {
	if id != nil {
		iuo = iuo.SetOrdersID(*id)
	}
	return iuo
}

// SetOrders sets the orders edge to Orders.
func (iuo *ItemUpdateOne) SetOrders(o *Orders) *ItemUpdateOne {
	return iuo.SetOrdersID(o.ID)
}

// ClearOrders clears the orders edge to Orders.
func (iuo *ItemUpdateOne) ClearOrders() *ItemUpdateOne {
	iuo.clearedOrders = true
	return iuo
}

// Save executes the query and returns the updated entity.
func (iuo *ItemUpdateOne) Save(ctx context.Context) (*Item, error) {
	if len(iuo.orders) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"orders\"")
	}
	return iuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ItemUpdateOne) SaveX(ctx context.Context) *Item {
	i, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return i
}

// Exec executes the query on the entity.
func (iuo *ItemUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ItemUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *ItemUpdateOne) sqlSave(ctx context.Context) (i *Item, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   item.Table,
			Columns: item.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  iuo.id,
				Type:   field.TypeInt,
				Column: item.FieldID,
			},
		},
	}
	if value := iuo.price_id; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: item.FieldPriceID,
		})
	}
	if value := iuo.addprice_id; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: item.FieldPriceID,
		})
	}
	if value := iuo.quantity; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  *value,
			Column: item.FieldQuantity,
		})
	}
	if value := iuo.addquantity; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  *value,
			Column: item.FieldQuantity,
		})
	}
	if iuo.clearedOrders {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   item.OrdersTable,
			Columns: []string{item.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.orders; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   item.OrdersTable,
			Columns: []string{item.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	i = &Item{config: iuo.config}
	_spec.Assign = i.assignValues
	_spec.ScanValues = i.scanValues()
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return i, nil
}
