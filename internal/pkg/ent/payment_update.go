// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/billing/internal/pkg/ent/instrument"
	"github.com/pepeunlimited/billing/internal/pkg/ent/orders"
	"github.com/pepeunlimited/billing/internal/pkg/ent/payment"
	"github.com/pepeunlimited/billing/internal/pkg/ent/predicate"
)

// PaymentUpdate is the builder for updating Payment entities.
type PaymentUpdate struct {
	config
	orders             map[int]struct{}
	instruments        map[int]struct{}
	clearedOrders      bool
	clearedInstruments bool
	predicates         []predicate.Payment
}

// Where adds a new predicate for the builder.
func (pu *PaymentUpdate) Where(ps ...predicate.Payment) *PaymentUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetOrdersID sets the orders edge to Orders by id.
func (pu *PaymentUpdate) SetOrdersID(id int) *PaymentUpdate {
	if pu.orders == nil {
		pu.orders = make(map[int]struct{})
	}
	pu.orders[id] = struct{}{}
	return pu
}

// SetNillableOrdersID sets the orders edge to Orders by id if the given value is not nil.
func (pu *PaymentUpdate) SetNillableOrdersID(id *int) *PaymentUpdate {
	if id != nil {
		pu = pu.SetOrdersID(*id)
	}
	return pu
}

// SetOrders sets the orders edge to Orders.
func (pu *PaymentUpdate) SetOrders(o *Orders) *PaymentUpdate {
	return pu.SetOrdersID(o.ID)
}

// SetInstrumentsID sets the instruments edge to Instrument by id.
func (pu *PaymentUpdate) SetInstrumentsID(id int) *PaymentUpdate {
	if pu.instruments == nil {
		pu.instruments = make(map[int]struct{})
	}
	pu.instruments[id] = struct{}{}
	return pu
}

// SetNillableInstrumentsID sets the instruments edge to Instrument by id if the given value is not nil.
func (pu *PaymentUpdate) SetNillableInstrumentsID(id *int) *PaymentUpdate {
	if id != nil {
		pu = pu.SetInstrumentsID(*id)
	}
	return pu
}

// SetInstruments sets the instruments edge to Instrument.
func (pu *PaymentUpdate) SetInstruments(i *Instrument) *PaymentUpdate {
	return pu.SetInstrumentsID(i.ID)
}

// ClearOrders clears the orders edge to Orders.
func (pu *PaymentUpdate) ClearOrders() *PaymentUpdate {
	pu.clearedOrders = true
	return pu
}

// ClearInstruments clears the instruments edge to Instrument.
func (pu *PaymentUpdate) ClearInstruments() *PaymentUpdate {
	pu.clearedInstruments = true
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PaymentUpdate) Save(ctx context.Context) (int, error) {
	if len(pu.orders) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"orders\"")
	}
	if len(pu.instruments) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"instruments\"")
	}
	return pu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PaymentUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PaymentUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PaymentUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PaymentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   payment.Table,
			Columns: payment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: payment.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pu.clearedOrders {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   payment.OrdersTable,
			Columns: []string{payment.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.orders; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   payment.OrdersTable,
			Columns: []string{payment.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.clearedInstruments {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.InstrumentsTable,
			Columns: []string{payment.InstrumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instrument.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.instruments; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.InstrumentsTable,
			Columns: []string{payment.InstrumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instrument.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PaymentUpdateOne is the builder for updating a single Payment entity.
type PaymentUpdateOne struct {
	config
	id                 int
	orders             map[int]struct{}
	instruments        map[int]struct{}
	clearedOrders      bool
	clearedInstruments bool
}

// SetOrdersID sets the orders edge to Orders by id.
func (puo *PaymentUpdateOne) SetOrdersID(id int) *PaymentUpdateOne {
	if puo.orders == nil {
		puo.orders = make(map[int]struct{})
	}
	puo.orders[id] = struct{}{}
	return puo
}

// SetNillableOrdersID sets the orders edge to Orders by id if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableOrdersID(id *int) *PaymentUpdateOne {
	if id != nil {
		puo = puo.SetOrdersID(*id)
	}
	return puo
}

// SetOrders sets the orders edge to Orders.
func (puo *PaymentUpdateOne) SetOrders(o *Orders) *PaymentUpdateOne {
	return puo.SetOrdersID(o.ID)
}

// SetInstrumentsID sets the instruments edge to Instrument by id.
func (puo *PaymentUpdateOne) SetInstrumentsID(id int) *PaymentUpdateOne {
	if puo.instruments == nil {
		puo.instruments = make(map[int]struct{})
	}
	puo.instruments[id] = struct{}{}
	return puo
}

// SetNillableInstrumentsID sets the instruments edge to Instrument by id if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableInstrumentsID(id *int) *PaymentUpdateOne {
	if id != nil {
		puo = puo.SetInstrumentsID(*id)
	}
	return puo
}

// SetInstruments sets the instruments edge to Instrument.
func (puo *PaymentUpdateOne) SetInstruments(i *Instrument) *PaymentUpdateOne {
	return puo.SetInstrumentsID(i.ID)
}

// ClearOrders clears the orders edge to Orders.
func (puo *PaymentUpdateOne) ClearOrders() *PaymentUpdateOne {
	puo.clearedOrders = true
	return puo
}

// ClearInstruments clears the instruments edge to Instrument.
func (puo *PaymentUpdateOne) ClearInstruments() *PaymentUpdateOne {
	puo.clearedInstruments = true
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *PaymentUpdateOne) Save(ctx context.Context) (*Payment, error) {
	if len(puo.orders) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"orders\"")
	}
	if len(puo.instruments) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"instruments\"")
	}
	return puo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PaymentUpdateOne) SaveX(ctx context.Context) *Payment {
	pa, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pa
}

// Exec executes the query on the entity.
func (puo *PaymentUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PaymentUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PaymentUpdateOne) sqlSave(ctx context.Context) (pa *Payment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   payment.Table,
			Columns: payment.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  puo.id,
				Type:   field.TypeInt,
				Column: payment.FieldID,
			},
		},
	}
	if puo.clearedOrders {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   payment.OrdersTable,
			Columns: []string{payment.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.orders; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   payment.OrdersTable,
			Columns: []string{payment.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orders.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.clearedInstruments {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.InstrumentsTable,
			Columns: []string{payment.InstrumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instrument.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.instruments; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.InstrumentsTable,
			Columns: []string{payment.InstrumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instrument.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pa = &Payment{config: puo.config}
	_spec.Assign = pa.assignValues
	_spec.ScanValues = pa.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pa, nil
}
